class UaS_Scarcity_Spawner : EventHandler {
	double ScarcityFactor;
	double OverspawnFactor;
	actor spawneditem;

	override void OnRegister() {
		ScarcityFactor = double(UaS_ScarcityRate) / 100.0;
		OverspawnFactor = UaS_ScarcityOverspawn + 1.0;
	}

	override void WorldTick() {
		if(level.maptime != 1) { return; }
		if(UaS_ScarcityEnabled == false) { return; }

		ExactScarcity('HD9mMag15', 1.0 - ScarcityFactor);
		ExactScarcity('HD9mMag30', 1.0 - ScarcityFactor);
		ExactScarcity('HD9mBoxPickup', 1.0 - ScarcityFactor);
		ExactScarcity('HD4mMag', 1.0 - ScarcityFactor);
		ExactScarcity('HD7mMag', 1.0 - ScarcityFactor);
		ExactScarcity('HD7mBoxPickup', 1.0 - ScarcityFactor);
		ExactScarcity('HD7mClip', 1.0 - ScarcityFactor);
		ExactScarcity('ShellPickup', 1.0 - ScarcityFactor);
		ExactScarcity('ShellBoxPickup', 1.0 - ScarcityFactor);
		ExactScarcity('HDBattery', 1.0 - ScarcityFactor);
		ExactScarcity('RocketBigPickup', 1.0 - ScarcityFactor);
		ExactScarcity('FragP', 1.0 - ScarcityFactor);
		ExactScarcity('HDFragGrenadeAmmo', 1.0 - ScarcityFactor);

		ExactScarcity('PortableStimpack', 1.0 - ScarcityFactor);
		ExactScarcity('PortableMedikit', 1.0 - ScarcityFactor);
		ExactScarcity('PortableBerserkPack', 1.0 - ScarcityFactor);

		ExactScarcity('HDArmour', 1.0 - ScarcityFactor);

		ExactScarcity('HDMap', 1.0 - ScarcityFactor);
		ExactScarcity('PortableLiteAmp', 1.0 - ScarcityFactor);
	}

	//Remover function which counts all of an item then only removes a set percentage
	void ExactScarcity(name checkClass, double targetPercent) {
		array<Actor> thingArray;
		Actor nextThing;
		let thingCounter = ThinkerIterator.Create(CheckClass, Thinker.STAT_DEFAULT);
		while(nextThing = Actor(thingCounter.Next(true))) {
			if(nextThing.GetClassName() == CheckClass) { thingArray.Push(nextThing); }
		}

		int originalcount = thingArray.Size();

		int targetAmount = thingArray.Size() * targetPercent;
		while(thingArray.Size() > targetAmount) {
			int index = random(0, thingArray.Size()-1);
			//actor mo = thingArray[index];
			DoReplacement(thingArray[index]);
			thingArray[index].destroy();
			thingArray.Delete(index);
			if(UaS_Debug & Scarcity) { console.printf("Removed "..checkClass); }
		}

		if(UaS_Debug & Scarcity) { console.printf(checkClass.." %i, %i, %i", originalcount, ThingArray.Size(), targetAmount); }
		thingArray.Clear();
	}

	void DoReplacement(actor targetActor) {
		//Replacer routines for ammo items
		switch(targetActor.GetClassName()) {
			case 'HD9mMag15':
				MagReplacer('HD9mMag15', 'HDLoose9mm', 15, targetActor);
				break;
			case 'HD9mMag30':
				MagReplacer('HD9mMag30', 'HDLoose9mm', 30, targetActor);
				break;
			case 'HD9mBoxPickup':
				BoxReplacer('HD9mBoxPickup', 'HDLoose9mm', 100, targetActor);
				break;
			case 'HD4mMag':
				MagReplacer('HD4mMag', 'FourMilAmmo', 50, targetActor);
				break;
			case 'HD7mMag':
				MagReplacer('HD7mMag', 'SevenMilAmmo', 30, targetActor);
				break;
			case 'HD7mBoxPickup':
				BoxReplacer('HD7mBoxPickup', 'SevenMilAmmo', 50, targetActor);
				break;
			case 'HD7mClip':
				MagReplacer('HD7mClip', 'SevenMilAmmo', 10, targetActor);
				break;
			case 'ShellPickup':
				UaS.SpawnStuff('HDShellAmmo', random(0, 4 * min(OverspawnFactor-ScarcityFactor, 1.0)), targetActor.pos, true);
				break;
			case 'ShellBoxPickup':
				BoxReplacer('ShellBoxPickup', 'HDShellAmmo', 20, targetActor);
				break;
			case 'HDBattery':
				int MagCap = 20 * min(OverspawnFactor - ScarcityFactor, 1.0);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { HDMagAmmo.SpawnMag(targetActor, 'HDBattery', random(0, MagCap)); }
				break;
			case 'RocketBigPickup':
				for(int i = 1; i <= 5; i++) {
					if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
						if(UaS.RandomChance(0.5)) { UaS.SpawnStuff('HDRocketAmmo', random(0, 1), targetActor.pos); }
						else { UaS.SpawnStuff('DudRocket', random(0, 1), targetActor.pos); }
					}
				}
				UaS.SpawnStuff('UaS_EmptyRocketBox', 1, targetActor.pos);
				break;
			case 'FragP':
			case 'HDFragGrenadeAmmo':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('FragP', random(0, 1), targetActor.pos); }
				else { UaS.SpawnStuff('HDFragSpoon', random(0, 1), targetActor.pos); }
				break;
		}

		//Replacer routines for medical items
		switch(targetActor.GetClassName()) {
			case 'PortableStimpack':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_StimInjector', 1, targetActor.pos); }
				else { UaS.SpawnStuff('SpentStim', random(0, 1), targetActor.pos); }
				UaS.SpawnStuff('UaS_EmptyStimpack', 1, targetActor.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', random(0, 1), targetActor.pos); }
				break;
			case 'PortableMedikit':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('PortableStimpack', 1, targetActor.pos); }
				let spawnedMedikit = HDMedikitter(actor.Spawn('HDMedikitter', targetActor.pos));
				if(!spawnedMedikit) { break; }
				//assume 7 auto-sutures per module, default 42 sutures = 6 modules
				int maxmodules = max(1, (42 * UaS_ScarcityOverspawn) / 6);
				int kitmodules = max(1, random(1, maxmodules));
				spawnedMedikit.weaponstatus[1] = 7 * kitmodules;
				if(spawnedMedikit.weaponstatus[1] < 42) { spawnedMedikit.frame = 2; }
				UaS.SpawnStuff('UaS_EmptyMedikit', 1, targetActor.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', maxmodules - kitmodules, targetActor.pos); }
				break;
			case 'PortableBerserkPack':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_ZerkInjector', 1, targetActor.pos); }
				else { UaS.SpawnStuff('SpentZerk', random(0, 1), targetActor.pos); }
				UaS.SpawnStuff('UaS_EmptyZerkpack', 1, targetActor.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', random(0, 1), targetActor.pos); }
				break;
		}

		//Replacer routines for equipment
		switch(targetActor.GetClassName()) {
			case 'HDMap':
				let spawnedMap = UaS_Automap(actor.Spawn('UaS_Automap', targetActor.pos));
				if(!spawnedMap) { break; }
				spawnedMap.status = random(0, 2);
				break;
			case 'PortableLiteAmp':
				let spawnedLiteAmp = PortableLiteAmp(actor.Spawn('PortableLiteAmp', targetActor.pos));
				double avgbroke = 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke += 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke += 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke /= 3;
				PortableLiteAmp(spawnedLiteAmp).brokenness = int(avgbroke);
				if(UaS_Debug & Scarcity) { console.printf("Liteamp brokenness %i", PortableLiteAmp(spawnedLiteAmp).brokenness); }
				if(PortableLiteAmp(spawnedLiteAmp).brokenness > 450) {
					UaS.SpawnStuff('UaS_BrokenLiteAmp', 1, spawnedLiteAmp.pos);
					spawnedLiteAmp.Destroy();
				}
				break;
		}

		//Replacer routine for armor
		switch(targetActor.GetClassName()) {
			case 'HDArmour':
				if(!UaS.RandomChance(ScarcityFactor)) { break; }
				let ArmourReducer = UaS_ArmorReducer(actor.Spawn('UaS_ArmorReducer', targetActor.pos));
				ArmourReducer.target = targetActor;
				ArmourReducer.ScarcityFactor = ScarcityFactor;
				break;
		}
	}

	//Generic function for breaking/replacing map-spawned magazines
	void MagReplacer(name MagName, name ammoName, int MagCap, actor spawnPointer) {
		int rounds, packed;
		MagCap *= min(OverspawnFactor - ScarcityFactor, 1.0); //Possible spawn at least *some* ammo, based on overspawn
		rounds = random(0, MagCap); //Pick a number up to cap
		//Pack some in a mag, or no mag at all
		if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
			packed = randompick(0, random(1, rounds)); //50%: pack none (spawn empty), or up to all
			rounds -= packed;
			HDMagAmmo.SpawnMag(spawnPointer, MagName, packed);
		}
		//spill the rest on the ground
		UaS.SpawnStuff(ammoName, rounds, spawnPointer.pos);
	}

	//Generic function for reducing amount in map-spawned ammo boxes, without removal since boxes are already rare
	void BoxReplacer(name BoxName, name ammoName, int BoxCap, actor spawnPointer) {
		int rounds, packed;
		BoxCap *= min(OverspawnFactor - ScarcityFactor, 1.0); //Possible spawn at least *some* ammo, based on overspawn
		rounds = random(BoxCap * 0.5, BoxCap); //Pick a number from 50% up to cap
		//Pack some in a box or no box at all
		if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
			packed = randompick(0, random(1, rounds)); //50%: pack none (spawn empty), or up to all
			rounds -= packed;
			let spawnedBox = hdupk(actor.Spawn(BoxName, spawnPointer.pos));
			hdupk(spawnedBox).amount = packed;
		}
		//spill the rest on the ground
		UaS.SpawnStuff(ammoName, rounds, spawnPointer.pos);
	}
}

class UaS_ArmorReducer : Actor {
	double ScarcityFactor;

	States {
		Spawn:
			TNT1 AAAAA 1;
			TNT1 A 0 ReduceArmor();
			stop;
	}

	action void ReduceArmor() {
		if(invoker.target) {
			Inventory(invoker.target).amount *= frandom(1.0 - invoker.ScarcityFactor, 1.0);
			if(UaS_Debug & Scarcity) { console.printf("%s reduced to %i", Inventory(invoker.target).GetClassName(), Inventory(invoker.target).amount); }
		}
		Destroy();
	}
}
