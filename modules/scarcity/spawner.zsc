class UaS_Scarcity_Spawner : EventHandler {
	double ScarcityFactor;
	double OverspawnFactor;
	actor spawneditem;

	override void WorldThingSpawned(WorldEvent e) {
		bool replaced = false;
		ScarcityFactor = double(UaS_ScarcityRate) / 100.0;
		OverspawnFactor = UaS_ScarcityOverspawn + 1.0;

		// Conditions for skipping spawn adjustment
		if(!UaS.RandomChance(ScarcityFactor)) { return; }
		if(level.maptime > 5) { return; }
		if(!e.Thing) { return; }
		if(e.Thing is "Inventory" && Inventory(e.Thing).Owner) { return; }

		// Randomly reduce armor
		switch(e.Thing.GetClassName()) {
			case 'HDArmour':
				let ArmourReducer = UaS_ArmorReducer(actor.Spawn('UaS_ArmorReducer', e.Thing.pos));
				ArmourReducer.target = e.Thing;
				ArmourReducer.ScarcityFactor = ScarcityFactor;
				break;
			/*case 'HDArmour':
				let spawnedArmor = HDArmour(actor.Spawn('HDArmour', e.Thing.pos));
				spawnedArmor.amount *= frandom(1.0 - ScarcityFactor, 1.0);
				break;*/
		}

		// Addition skip, hopefully prevent recusion
		if(e.Thing.bDROPPED) { return; }

		// Randomly break/reduce packed ammo pickups
		switch(e.Thing.GetClassName()) {
			case 'HD9mMag15':
				replaced = MagReplacer('HD9mMag15', 'HDLoose9mm', 15, e.Thing);
				break;
			case 'HD9mMag30':
				replaced = MagReplacer('HD9mMag30', 'HDLoose9mm', 30, e.Thing);
				break;
			case 'HD9mBoxPickup':
				hdupk(e.Thing).amount = BoxReducer('HD9mBoxPickup', 'HDLoose9mm', 100, e.Thing);
				break;
			case 'HD4mMag':
				replaced = MagReplacer('HD4mMag', 'FourMilAmmo', 50, e.Thing);
				break;
			case 'HD7mMag':
				replaced = MagReplacer('HD7mMag', 'SevenMilAmmo', 30, e.Thing);
				break;
			case 'HD7mBoxPickup':
				hdupk(e.Thing).amount = BoxReducer('HD7mBoxPickup', 'SevenMilAmmo', 50, e.Thing);
				break;
			case 'HD7mClip':
				replaced = MagReplacer('HD7mClip', 'SevenMilAmmo', 10, e.Thing);
				break;
			case 'ShellPickup':
				UaS.SpawnStuff('HDShellAmmo', random(0, 4 * min(OverspawnFactor-ScarcityFactor, 1.0)), e.Thing.pos, true);
				replaced = true;
				break;
			case 'ShellBoxPickup':
				hdupk(e.Thing).amount = BoxReducer('ShellBoxPickup', 'HDShellAmmo', 20, e.Thing);
				break;
			case 'HDBattery':
				int MagCap = 20 * min(OverspawnFactor - ScarcityFactor, 1.0);
				HDMagAmmo.SpawnMag(e.Thing, 'HDBattery', random(0, MagCap));
				replaced = true;
				break;
			case 'RocketBigPickup':
				for(int i = 1; i <= 5; i++) {
					if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('HDRocketAmmo', random(0, 1), e.Thing.pos); }
					else { UaS.SpawnStuff('DudRocket', random(0, 1), e.Thing.pos); }
				}
				UaS.SpawnStuff('UaS_EmptyRocketBox', 1, e.Thing.pos);
				replaced = true;
				break;
			case 'FragP':
			case 'HDFragGrenadeAmmo':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
					break;
				}
				else {
					UaS.SpawnStuff('HDFragSpoon', random(0, 1), e.Thing.pos);
					replaced = true;
				}
				break;
		}

		// Randomly break/reduce medical and health items
		switch(e.Thing.GetClassName()) {
			case 'PortableMedikit':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('PortableStimpack', 1, e.Thing.pos); }
				let spawnedMedikit = HDMedikitter(actor.Spawn('HDMedikitter', e.Thing.pos));
				if(!spawnedMedikit) { break; }
				spawnedMedikit.injectableflesh = random(0, 2);
				spawnedMedikit.usedpatches = random(0, HD_MEDPATCHLIMIT * ScarcityFactor);
				if(spawnedMedikit.injectableflesh < 2 || spawnedMedikit.usedpatches > 0) { spawnedMedikit.frame = 2; }
				UaS.SpawnStuff('UaS_EmptyMedikit', 1, e.Thing.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', random(0, 2 - spawnedMedikit.injectableflesh), e.Thing.pos); }
				replaced = true;
				break;
			case 'PortableStimpack':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_StimInjector', random(0, 1), e.Thing.pos); }
				else { UaS.SpawnStuff('SpentStim', random(0, 1), e.Thing.pos); }
				UaS.SpawnStuff('UaS_EmptyStimpack', 1, e.Thing.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', random(0, 1), e.Thing.pos); }
				replaced = true;
				break;
			case 'PortableBerserkPack':
				for(int i = 1; i <= 4; i++) {
					if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_ZerkInjector', random(0, 1), e.Thing.pos); }
					else { UaS.SpawnStuff('SpentZerk', random(0, 1), e.Thing.pos); }
				}
				UaS.SpawnStuff('UaS_EmptyZerkpack', 1, e.Thing.pos);
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) { UaS.SpawnStuff('UaS_2FCartridge', random(0, 1), e.Thing.pos); }
				replaced = true;
				break;
			/*case 'BluePotion':
				if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
					break;
				}
				else {
					UaS.SpawnStuff('SpentBottle', 1, e.Thing.pos);
					UaS.SpawnStuff('SpentCork', 1, e.Thing.pos);
					replaced = true;
				}
				break;*/
		}

		// Randomly break equipment items
		switch(e.Thing.GetClassName()) {
			case 'HDMap':
				let spawnedMap = UaS_Automap(actor.Spawn('UaS_Automap', e.Thing.pos));
				if(!spawnedMap) { break; }
				spawnedMap.status = randompick(0,0,1,1,2);
				replaced = true;
				break;
			case 'PortableLiteAmp':
				double avgbroke = 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke += 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke += 400 + random(-400 * UaS_ScarcityOverspawn, 100 * (1.0 - UaS_ScarcityOverspawn));
				avgbroke /= 3;
				PortableLiteAmp(e.Thing).brokenness = int(avgbroke);
				if(UaS_Debug >=1) { console.printf("Liteamp brokenness %i", PortableLiteAmp(e.Thing).brokenness); }
				if(PortableLiteAmp(e.Thing).brokenness > 450) {
					UaS.SpawnStuff('UaS_BrokenLiteAmp', 1, e.Thing.pos);
					replaced = true;
				}
				break;
		}

		// Delete the original object if it was replaced
		if(replaced == true) {
			if(UaS_Debug >=1) { console.printf("%s replaced", e.Thing.GetClassName()); }
			e.Thing.Destroy();
		}

	}

	//Generic function for breaking/replacing map-spawned magazines
	bool MagReplacer(name MagName, name ammoName, int MagCap, actor spawnPointer) {
		bool returnValue;
		int rounds, packed;
		MagCap *= min(OverspawnFactor - ScarcityFactor, 1.0); //Possible spawn at least *some* ammo, based on overspawn
		rounds = random(0, MagCap); //Pick a number up to cap
		//Pack some in a mag, or no mag at all
		if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
			packed = randompick(0, random(1, rounds)); //50%: pack none (spawn empty), or up to all
			rounds -= packed;
			HDMagAmmo.SpawnMag(spawnPointer, MagName, packed);
		}
		//spill the rest on the ground
		UaS.SpawnStuff(ammoName, rounds, spawnPointer.pos);
		returnValue = true;
		return returnValue;
	}

	//Generic function for reducing amount in map-spawned ammo boxes, without removal since boxes are already rare
	int BoxReducer(name BoxName, name ammoName, int BoxCap, actor spawnPointer) {
		int rounds, loose;
		BoxCap *= min(OverspawnFactor - ScarcityFactor, 1.0); //Possible spawn at least *some* ammo, based on overspawn
		rounds = random(BoxCap * 0.5, BoxCap); //Pick a number from 50% up to cap
		//Drop random amount of on ground
		if(UaS.RandomChance(UaS_ScarcityOverspawn)) {
			loose = random(0, rounds * 0.5); //spill up to 50%
			rounds -= loose;
			UaS.SpawnStuff(ammoName, loose, spawnPointer.pos);
		}
		//Pack the rest into the box.
		return rounds;
	}
}

class UaS_ArmorReducer : Actor {
	double ScarcityFactor;

	States {
		Spawn:
			TNT1 AAAAA 1;
			TNT1 A 0 ReduceArmor();
			stop;
	}

	action void ReduceArmor() {
		if(invoker.target) {
			Inventory(invoker.target).amount *= frandom(1.0 - invoker.ScarcityFactor, 1.0);
			if(UaS_Debug >=1) { console.printf("%s reduced to %i", Inventory(invoker.target).GetClassName(), Inventory(invoker.target).amount); }
		}
		Destroy();
	}
}