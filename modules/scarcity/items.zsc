const UaS_2FCartridge_Max = 16;

// spare Second Flesh cartridges
class UaS_2FCartridge_Handler : Inventory {
	int cooldown;

	override void DoEffect() {
		super.DoEffect();
		let ownr = HDPlayerPawn(owner);
		if(!ownr || !ownr.player.ReadyWeapon) { return; }
		if(cooldown == 0 && ownr.player.ReadyWeapon.GetClassName() == 'HDMedikitter') {
			if((ownr.player.cmd.buttons & BT_USER4) && owner.countinv('UaS_2FCartridge') < UaS_2FCartridge_Max) {
				if(HDMedikitter(ownr.player.ReadyWeapon).injectableflesh > 0) {
					HDMedikitter(ownr.player.ReadyWeapon).injectableflesh--;
					owner.A_GiveInventory('UaS_2FCartridge', 1);
					owner.A_PlaySound("weapons/rifleclick", volume: 0.5);
					cooldown = 20;
				}
			}

			else if((ownr.player.cmd.buttons & BT_USER1) && owner.countinv('UaS_2FCartridge') > 0) {
				if(HDMedikitter(ownr.player.ReadyWeapon).injectableflesh < 2) {
					HDMedikitter(ownr.player.ReadyWeapon).injectableflesh++;
					owner.A_TakeInventory('UaS_2FCartridge', 1);
					owner.A_PlaySound("weapons/rifleload", volume: 0.75);
					cooldown = 20;
				}
			}
		}
		cooldown = clamp(cooldown - 1, 0, 20);
	}
}

class UaS_2FCartridge : HDPickup {
	Default {
		Inventory.Amount 1;
		inventory.pickupmessage "Picked up a second flesh cartridge.";
		inventory.MaxAmount UaS_2FCartridge_Max;
		hdpickup.bulk 6;
		Inventory.Icon "HSCVP0";
		+INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
		+Inventory.KEEPDEPLETED;
		scale 0.25;
		hdpickup.nicename "Second Flesh Cartridge";
		hdpickup.refid UAS_HDLD_2FMOD;
	}

	action void HelpMessage() {
		if(getcvar("hd_helptext")) { console.printf("With your medikit open, press secondary reload to insert the cartridge, and unload to remove the cartridge."); }
	}

	States {
		Spawn:
			HSCV P -1;
			stop;
		Use:
			HSCV P 1 HelpMessage();
			fail;
	}
}

// Damaged automap
class UaS_Automap : HDPickup {
	int status;
	int baseFrame;
	double cycleProb;
	bool working;

	Default {
		scale 0.3;
	}

	override void actualpickup(actor other) {
		switch(status) {
			case 0: // Functioning Normally
				target = other;
				A_GiveToTarget("MapRevealer",1);
				A_Log("\c-Local area map downloaded.");
				A_PlaySound("misc/i_pkup",0,1,0,0);
				return;
				break;
			case 1: // Damaged
				if(working) {
					target = other;
					A_GiveToTarget("MapRevealer",1);
					A_Log("\c-Local area map downloaded.");
					A_PlaySound("misc/i_pkup",0,1,0,0);
				}
				if(UaS.RandomChance(0.25)) { status = 2; }
				return;
				break;
			case 2: // Broken, might randomly fix
				if(UaS.RandomChance(0.25)) { status = 1; }
				return;
				break;
		}
	}

	action void UpdateFrame() {
		invoker.cycleProb += 0.0001;
		switch(invoker.status) {
			case 0: // Functioning Normally
				invoker.sprite = GetSpriteIndex('PMAP');
				if(invoker.frame == invoker.baseFrame) { invoker.frame = invoker.baseFrame + 4; }
				else { invoker.frame = invoker.baseFrame; }

				if(UaS.RandomChance(invoker.cycleProb)) {
					invoker.baseFrame = random(0,3);
					invoker.cycleProb = 0;
				}
				break;
			case 1: // Damaged
				invoker.sprite = GetSpriteIndex('HSCV');
				if(invoker.baseframe < 10) { invoker.baseframe = 10; }

				if(invoker.working) {
					if(invoker.frame == invoker.baseFrame) { invoker.frame = 9; }
					else { invoker.frame = invoker.baseFrame; }
					invoker.tics += random(0,2);
				}
				else {
					invoker.frame = 9;
					invoker.tics += random(0,5);
				}

				if(UaS.RandomChance(0.1)) { invoker.working = !invoker.working; }

				if(UaS.RandomChance(invoker.cycleProb)) {
					invoker.baseFrame = random(10,13);
					invoker.cycleProb = 0;
				}
				break;
			case 2: // Broken and useless
				invoker.sprite = GetSpriteIndex('HSCV');
				invoker.frame = 9;
				break;
		}
	}

	States {
		Spawn:
			TNT1 A 1;
		SpawnLoop:
			#### # 1 UpdateFrame();
			Loop;
	}
}

// Loose injector pickups
class UaS_StimInjector : Actor {
	default {
		translation "176:191=80:95";
	}

	override void PostBeginPlay(){
		let spawneditem = Inventory(actor.Spawn("PortableStimpack", (pos.x, pos.y, pos.z + 5)));
		if(spawneditem) {
			spawneditem.sprite = GetSpriteIndex('SYRG');
			spawneditem.frame = 0;
			spawneditem.translation = translation;
			spawneditem.scale.x = 0.32;
			spawneditem.scale.y = 0.28;
			//spawneditem.PickupMsg = "Picked up a loose stim injector.";
		}
		destroy();
		super.PostBeginPlay();
	}
}

class UaS_ZerkInjector : Actor {
	default {
		translation "112:127=107:111";
	}

	override void PostBeginPlay(){
		let spawneditem = Inventory(actor.Spawn("PortableBerserkPack", (pos.x, pos.y, pos.z + 5)));
		if(spawneditem) {
			spawneditem.sprite = GetSpriteIndex('SYRG');
			spawneditem.frame = 0;
			spawneditem.translation = translation;
			spawneditem.scale.x = 0.32;
			spawneditem.scale.y = 0.28;
			spawneditem.amount = 1;
			//spawneditem.PickupMsg = "Picked up a loose zerk injector.";
		}
		destroy();
		super.PostBeginPlay();
	}
}

// Can't actually pick these up, but they respond to the action
class UaS_FakePickup : HDPickup {
	override void actualpickup(actor other) {
		return;
	}
}

class UaS_EmptyStimpack : UaS_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV E 1;
			Loop;
	}
}

class UaS_EmptyMedikit : UaS_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV F 1;
			Loop;
	}
}

class UaS_EmptyZerkpack : UaS_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV G 1;
			Loop;
	}
}

class UaS_EmptyRocketBox : UaS_FakePickup {
	default {
		scale 0.5;
	}

	States {
		Spawn:
			HSCV H 1;
			Loop;
	}
}

class UaS_BrokenLiteAmp : UaS_FakePickup {
	default {
		scale 0.5;
	}

	States {
		Spawn:
			HSCV O 1;
			Loop;
	}
}
