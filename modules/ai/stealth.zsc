class UaS_StealthHandler : Inventory {
	int threshold;
	int stealth;
	int trueLightLevel;
	ThinkerIterator LightFinder;
	DynamicLight currentLight;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner || !owner.player) { return; }
		if (!UaS_AI_Stealth) { return; }

		threshold = (24 / owner.player.crouchfactor) - owner.vel.length();

		stealth -= clamp(GetLightLevel() - threshold, -5, 5);
		stealth = clamp(stealth, 0, 100);

		if (stealth == 100) { owner.bSHADOW = true; }
		if (stealth == 0) { owner.bSHADOW = false; }

		//owner.A_Log("Stealth "..stealth);
	}

	int GetLightLevel() {
		// Set up light iterator
		LightFinder = ThinkerIterator.Create("DynamicLight", Thinker.STAT_DLIGHT);

		// Initial "base" lightlevel
		int trueLightLevel = owner.cursector.lightlevel;

		// Iterate lights
		while (currentLight = DynamicLight(LightFinder.Next())) {
			if (currentLight.CheckClass("VisorLight")) { continue; } // Skip HD's nightvision visor light

			double currentDistance = owner.Distance3D(currentLight);

			double distanceFactor = currentDistance / double(currentLight.args[DynamicLight.LIGHT_INTENSITY] * 2);

			double avgIntensity = (currentLight.args[DynamicLight.LIGHT_RED] +
				currentLight.args[DynamicLight.LIGHT_GREEN] +
				currentLight.args[DynamicLight.LIGHT_BLUE]) / 3;

			avgIntensity *= 1.0 - distanceFactor;

			if (currentlight.bSPOT) {
				double offangle = abs(deltaangle(currentlight.AngleTo(owner), currentlight.angle));
				if (offangle > currentlight.SpotInnerAngle) { avgIntensity *= 0.5; }
				if (offangle > currentlight.SpotOuterAngle) { avgIntensity *= 0.0; }
			}

			if (currentDistance < owner.radius * 3) { avgIntensity = 255; }

			trueLightLevel = max(trueLightLevel, avgIntensity);
		}
		//owner.A_Log("lightlevel "..trueLightLevel);
		return trueLightLevel;
	}
}
