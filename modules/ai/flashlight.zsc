extend class UaS_AI_Handler {
	UaS_Monster_Flashlight monsterlight;
	int	Recheck;
	bool Flashing;
	int flashrate;

	void Flashlight() {
		// Only do light for human-type classes
		bool validClass = (
			owner.CheckClass("ZombieStormtrooper", AAPTR_DEFAULT, true) ||
			owner.CheckClass("HideousShotgunGuy", AAPTR_DEFAULT, true) ||
			owner.CheckClass("DragonGuard", AAPTR_DEFAULT, true) ||
			owner.CheckClass("HDMarine", AAPTR_DEFAULT, true)
		);
		if (!validClass) { return; }

		// Toss and disconnect if owner dies
		if (owner.health <= 0) {
			if (monsterLight) {
				monsterLight.vel.x = frandom(-5, 5);
				monsterLight.vel.y = frandom(-5, 5);
				monsterLight.vel.z = frandom(2, 5);
				monsterLight.rot.a = frandom(-75, 75);
				monsterLight.rot.p = frandom(-25, 25);
				monsterLight.followTarget = null;
				monsterLight = null;
			}
			// Abort since owner dead.
			return;
		}

		// Create new light if owner alive and there isn't one.
		if (!monsterlight) {
			monsterlight = UaS_Monster_Flashlight(actor.spawn("UaS_Monster_Flashlight", owner.pos, false));
			monsterlight.followTarget = owner;
			monsterLight.brightness = 1.0;
		}

		// Point down if not aiming
		if (owner.frame != 4 && owner.frame != 5) { monsterlight.offsetPitch = 35; }
		else { monsterlight.offsetPitch = 0; }

		if(!UaS_AI_Flashlights) {
			monsterlight.active = false;
			return;
		}

		if (recheck <= 0) {
			FLineTraceData lookSpot;
			owner.LineTrace(owner.angle, 256, owner.pitch, TRF_THRUACTORS, owner.height * 0.75, data: lookSpot);
			double lightlevel = lookSpot.HitSector.LightLevel;
			if (frandom(0, 1) >= (lightlevel / 128)) {
				monsterlight.active = true; }
			else {
				monsterlight.active = false;
			}
			recheck = max(random(35,175), lightlevel );
			flashrate = random(1, 4);
		}

		Flashing = (owner.target &&
			owner.CheckClass("HDMarine", AAPTR_DEFAULT, true) &&
			(owner.frame == 4 || owner.frame == 5)
		);

		if (Flashing && level.maptime & flashrate == 0) { monsterlight.active = !monsterlight.active; }

		recheck--;

	}
}

struct rotationInfo {
	double a;
	double p;
	double r;
}

class UaS_Monster_Flashlight_Light : DynamicLight {
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		args[DynamicLight.LIGHT_RED] = 255;
		args[DynamicLight.LIGHT_GREEN] = 255;
		args[DynamicLight.LIGHT_BLUE] = 255;
		args[DynamicLight.LIGHT_INTENSITY] = 128;
		SpotInnerAngle = 15;
		SpotOuterAngle = 35;
	}
}

class UaS_Monster_Flashlight : Actor {
	actor followTarget;
	rotationinfo rot;
	vector3 targetPos;
	rotationInfo targetRot;
	bool targetKilled;
	actor actualLight;
	bool active;
	int offsetAngle, offsetPitch;
	double brightness;

	default {
		radius 2;
		height 4;
		+THRUACTORS;
		scale 0.25;
		friction 0.1;
		RenderStyle "Add";
	}

	override void Tick() {
		super.Tick();

		// Update rotation/pitcj
		A_SetAngle(angle + (rot.a / 4), true);
		A_SetPitch(pitch + (rot.p / 4), true);

		// Handle held or loose light
		if (followTarget) {
			targetpos = followTarget.vec3Angle(8, followTarget.angle, followTarget.height * 0.75, false);
			targetRot.a = followTarget.angle + offsetAngle;
			targetRot.p = followTarget.pitch + offsetPitch;
			vel.x += DampedSpring(pos.x, targetpos.x, vel.x, 0.5, 0.75);
			vel.y += DampedSpring(pos.y, targetpos.y, vel.y, 0.5, 0.75);
			vel.z += DampedSpring(pos.z, targetpos.z, vel.z, 0.5, 0.75);
			rot.a += DampedSpring(angle, targetRot.a, rot.a, 0.25, 0.2);
			rot.p += DampedSpring(pitch, targetRot.p, rot.p, 0.25, 0.2);
		}
		else {
			brightness += frandom(brightness * -0.2, brightness * 0.2);
			brightness = clamp(brightness * 0.999, 0, 1);
			if (brightness <= 0.1) { destroy(); }
			if (pos.z - floorz <= 0) {
				rot.a *= 0.95;
				vel.xy += RotateVector(vel.xy, angle - rot.a);
				rot.p = 0;
				pitch = 0;
			}
		}

		switch(active) {
			case true:
				SetStateLabel("LightOn");
				if (!actualLight) {
					actualLight = actor.spawn("UaS_Monster_Flashlight_Light", pos, false);
					actualLight.target = self;
				}
				actualLight.A_SetAngle(angle, true);
				actualLight.A_SetPitch(pitch, true);
				actualLight.args[DynamicLight.LIGHT_INTENSITY] = 128 * brightness;

				// Draw particle beam
				for (double d = 1; d < 48; d = d + (d / 2)) {
					A_SpawnParticle("White", SPF_FULLBRIGHT|SPF_RELANG,
						1, (sin(35) * d * 8), 0,
						cos(pitch) * cos(angle) * d, cos(pitch) * sin(angle) * d, sin(-pitch) * d,
						vel.x, vel.y, vel.z,
						0, 0, 0,
						(4.0 * brightness) / (d ** 2), 0, 0);
				}
				break;
			case false:
				SetStateLabel("LightOff");
				if (actualLight) { actualLight.Destroy(); }
				break;
		}
	}

	states {
		Spawn:
			TNT1 A 0;
		LightOn:
			#### A 35 BRIGHT;
		LightOff:
			#### B 35;
			loop;
	}

	double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
}
