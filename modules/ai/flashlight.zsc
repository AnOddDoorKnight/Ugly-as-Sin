extend class UaS_AI_Handler {
	UaS_Monster_Flashlight monsterlight;
	int	Recheck;

	void Flashlight() {
		bool validClass = (
			owner.CheckClass("ZombieStormtrooper", AAPTR_DEFAULT, true) ||
			owner.CheckClass("HideousShotgunGuy", AAPTR_DEFAULT, true) ||
			owner.CheckClass("DragonGuard", AAPTR_DEFAULT, true) ||
			owner.CheckClass("HDMarine", AAPTR_DEFAULT, true)
		);

		if (!validClass) { return; }
		if (owner.health <= 0) { return; }

		if (!monsterlight) {
			monsterlight = UaS_Monster_Flashlight(actor.spawn("UaS_Monster_Flashlight", owner.pos, false));
			monsterlight.followTarget = owner;
			//monsterlight.active = true;
		}

		if (recheck <= 0) {
			double lightlevel = owner.cursector.LightLevel;
			if (frandom(0, 1) >= (lightlevel / 128)) {
				monsterlight.active = true; }
			else {
				monsterlight.active = false;
			}
			recheck = random(35,175);
		}
		recheck--;
	}
}

struct rotationInfo {
	double a;
	double p;
	double r;
}

class UaS_Monster_Flashlight_Light : DynamicLight {
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		args[DynamicLight.LIGHT_RED] = 255;
		args[DynamicLight.LIGHT_GREEN] = 255;
		args[DynamicLight.LIGHT_BLUE] = 255;
		args[DynamicLight.LIGHT_INTENSITY] = 192;
		SpotInnerAngle = 15;
		SpotOuterAngle = 35;
	}
}

class UaS_Monster_Flashlight : Actor {
	actor followTarget;
	rotationinfo rot;
	vector3 targetPos;
	rotationInfo targetRot;
	bool targetKilled;
	actor actualLight;
	bool active;

	default {
		radius 2;
		height 4;
		+THRUACTORS;
	}

	override void Tick() {
		super.Tick();
		if(!followTarget) {
			destroy();
			return;
		}

		if(active && !actualLight) {
			actualLight = actor.spawn("UaS_Monster_Flashlight_Light", pos, false);
			actualLight.target = self;
		}
		else if (!active && actualLight) {
			actualLight.Destroy();
		}

		if(!actuallight) { return; }

		if(followtarget.health <= 0) {
			if(!targetKilled) {
				vel.x = frandom(-5, 5);
				vel.y = frandom(-5, 5);
				vel.z = frandom(0, 5);
				rot.a = frandom(-65, 65);
				rot.p = frandom(-65, 65);
				targetKilled = true;
			}
			if(pos.z - floorz <=0) {
				rot.a *= 0.98;
				rot.p *= 0.9;
				pitch = clamp(pitch, 0, -80);
			}
		}
		else if (followtarget.health > 0) {
			targetpos = followTarget.vec3Angle(8, followTarget.angle, followTarget.height * 0.75, false);
			targetRot.a = followTarget.angle;
			targetRot.p = followTarget.pitch;
			vel.x += DampedSpring(pos.x, targetpos.x, vel.x, 1, 1);
			vel.y += DampedSpring(pos.y, targetpos.y, vel.y, 1, 1);
			vel.z += DampedSpring(pos.z, targetpos.z, vel.z, 1, 1);
			rot.a += DampedSpring(angle, targetRot.a, rot.a, 0.25, 0.2);
			rot.p += DampedSpring(pitch, targetRot.p, rot.p, 0.25, 0.2);
		}

		A_SetAngle(angle + (rot.a / 4), true);
		A_SetPitch(pitch + (rot.p / 4), true);

		actualLight.A_SetAngle(angle, true);
		actualLight.A_SetPitch(pitch, true);

		//Particles
		for (double i = 1; i < 12; i++) {
			A_SpawnParticle("White", SPF_FULLBRIGHT|SPF_RELANG,
				1, (sin(70) * i * 18), 0,
				cos(pitch) * cos(angle) * 4 * i, cos(pitch) * sin(angle) * 4 * i, sin(-pitch) * 4 * i,
				vel.x, vel.y, vel.z,
				0, 0, 0,
				0.5 / (i ** 2), 0, 0);
		}
	}

	double DampedSpring(double p, double r, double v, double k, double d) {
		return -(d * v) - (k * (p - r));
	}
}
