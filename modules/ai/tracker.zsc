class UaS_LastKnownMarker : PatrolPoint {}

class UaS_AI_Handler : Inventory {

	override void BeginPlay() {
		super.BeginPlay();
		countdown = -1; // -1 = "no countdown", to prevent repeated triggering of zero conditions
	}

	override void DoEffect() {
		super.DoEffect();
		if(!owner) { return; }
		if(!lastKnown) { lastKnown = UaS_LastKnownMarker(actor.Spawn("UaS_LastKnownMarker", owner.pos)); }
		if(owner.health <=0) { return; }

		SearchBehavior();
	}
}

extend class UaS_AI_Handler {
	int AIMode;
	actor lastKnown;
	actor oldTarget;
	int countdown;

	enum modes {
		normal = 0,
		chasing = 1,
		searching = 2,
	};

	void SearchBehavior() {
		switch(AIMode) {
			// Standard AI mode, no changes to behavior
			case normal:
				if(!owner.target) { return; }
				if(owner.target == lastKnown) {
					owner.A_ClearTarget();
					return;
				}
				if(owner.CheckIfTargetInLOS()) {
					// Add to countdown while in LOS, up to 5 seconds
					// as a sort of soft aggro-cooldown  before monsters
					// switch to more passive goal chase.
					countdown = clamp(countdown + 1, 35, 175);
					lastKnown.SetOrigin(owner.target.pos, true);
					break;
				}
				if(countdown == 0) {
					//set 1-2 minutes for chase + search time.
					countdown = random(60, 120) * 35;
					owner.A_ClearTarget();
					owner.target = lastKnown;
					owner.goal = lastKnown;
					owner.bchasegoal = true;
					AIMode = chasing;
					console.printf(owner.getclassname().." switch to chasing");
				}
				break;
			// Player LOS, set goal to last known position.
			case chasing:
				// Simple check to see if the monster has aquired another target.
				if(owner.target != lastKnown) {
					AIMode = normal;
					owner.goal = null;
					owner.bchasegoal = false;
					console.printf(owner.getclassname().." reacquired");
				}
				// Check if in search area or timer too low.
				if(owner.Distance3D(lastKnown) <= 64 || countdown <= (30 * 35)) {
					owner.A_ClearTarget();
					owner.goal = null;
					owner.bchasegoal = false;
					AIMode = searching;
					console.printf(owner.getclassname().." switch to searching");
				}
				break;
			// Reached last position or search timer dropped too low. Wander in area.
			case searching:
				// Abuse Hideous Destructor's monster-mover function.
				if(countdown % 5 == 0) {
					hdmobai.wander(owner, false);
					console.printf(owner.getclassname().." searching for "..(countdown/35));
				}
				// Another simple check to return to normal if monster gets a target.
				if(owner.target) {
					AIMode = normal;
					console.printf(owner.getclassname().." reacquired");
				}
				// Finish the search and return to normal mode.
				if(countdown <= 0) {
					AIMode = normal;
					owner.A_ClearTarget();
					owner.goal = null;
					console.printf(owner.getclassname().." gave up the search");
				}
				break;
		}
		countdown = max(countdown - 1, -1);
	}

}