const CHAN_RESP = 82698380;
const CHAN_BREATH = 82698381;
const RESP_CAPACITY = 10500;

class UaS_Respirator : HDPickup {
	bool activated;
	bool refill;
	int capacity;
	int maxcapacity;
	int reserve;
	int breathing;
	double breathcycle;

	default {
		Inventory.Amount 1;
		//Inventory.MaxAmount 1;
		inventory.icon "UGSID0";
		inventory.pickupmessage "Picked up an emergency respirator.";
		height 12;
		radius 4;
		hdpickup.bulk 25;
		tag "Emergency respirator";
		HDPickup.refid UAS_HDLD_RESPIRATOR;
	}

	states {
		spawn:
			UGSI D 0 -1;
			stop;
	}

	override void BeginPlay() {
		super.PostBeginPlay();
		maxcapacity = RESP_CAPACITY * amount;
		if (capacity == 0) { capacity = maxcapacity; }
		breathcycle = 0.1;
	}

	override void DoEffect() {
		hdplayerpawn o = hdplayerpawn(owner);

		// Canister active
		if (activated && capacity > 1) {
			capacity -= 1 + (o.fatigue / 5);
			breathing -= 1 + (o.fatigue / 5);
			if (reserve < level.AirSupply) { reserve++; }
			o.player.air_finished = Level.maptime + reserve;

			if (breathing <= 0) {
				owner.A_StartSound("UaS/respirator/breathing", CHAN_BREATH, 0, frandom[uas_resp](0.5, 0.75), ATTN_STATIC, 1.0 + breathcycle);
				breathing = 120;
				breathcycle = 0 - breathcycle;
			}
		}

		// Runout hiss
		if ((activated && capacity <= 1) || owner.health <= 0) {
			owner.A_StartSound("UaS/respirator/empty", CHAN_RESP, CHANF_OVERLAP, 1, ATTN_STATIC, 1);
			activated = false;
		}

		capacity = clamp(capacity, 1, maxcapacity);

		if (!activated && refill) { DoRefill(); }

		//Bulk increases geometrically
		bulk = (amount * 25) + ((amount - 1) * 5);
		maxcapacity = amount * RESP_CAPACITY;
		//console.printf("maxcapacity "..maxcapacity);
		super.DoEffect();
	}

	override bool Use(bool pickup) {
		PlayerPawn o = playerpawn(owner);

		if (!activated && (o.player.buttons & BT_USE)) { refill = !refill; return false; }

		if (capacity <= 1) {
			owner.A_Log("Canister empty. Hold [use] and activate to refill.", true);
			return false;
		}

		owner.A_StopSound(CHAN_BREATH);
		owner.A_StartSound("UaS/respirator/click", CHAN_AUTO, 0, 1, ATTN_STATIC);
		if (capacity > 1) {
			owner.A_StartSound("UaS/respirator/toggle", CHAN_RESP, 0, 1, ATTN_STATIC);
			reserve = clamp(o.player.air_finished - Level.maptime, 0, level.AirSupply);
			breathing = 25;
			breathcycle = 0.1;
			activated = !(activated);
			refill = false;
		}
		return false;
	}

	void DoRefill() {
		if (owner.waterlevel >=3 ) {
			owner.A_Log("Can't refill canister underwater.", true);
			refill = false;
			return;
		}

		if (capacity >= maxcapacity) {
			owner.A_Log("Canister full.", true);
			refill = false;
			return;
		}

		capacity = min(capacity + 10, maxcapacity);
		if (level.maptime % 5 == 0) { owner.A_StartSound("UaS/respirator/pump", CHAN_RESP, CHANF_OVERLAP, 0.5, ATTN_STATIC, 1.5); }
		if (level.maptime % 35 == 0) {
			owner.A_StartSound("UaS/respirator/toggle", CHAN_RESP, CHANF_OVERLAP, 0.75, ATTN_STATIC, 1);
		}
	}

	override inventory CreateTossable(int amt) {
		if(amount<1)return null;
		int maxdrop = min(capacity, RESP_CAPACITY);
		console.printf("maxdrop "..maxdrop.." amount "..amount);
		if(activated) { Use(false); }
		UaS_Respirator DroppedResp = UaS_Respirator(super.CreateTossable(amt));
		console.printf("maxdrop "..maxdrop.." amount "..amount);
		if (DroppedResp) {
			DroppedResp.capacity = 1337;
			console.printf("remain "..capacity);
		}
		return DroppedResp;
	}

	override void actualpickup(actor other) {
		super.actualpickup(other);
		UaS_Respirator pu = UaS_Respirator(other.findinventory("UaS_Respirator", false));
		if (pu.amount > 1) {
			other.A_StartSound("UaS/respirator/toggle", CHAN_RESP, 0, 1, ATTN_STATIC);
			console.printf(""..pu.amount);
		}
		pu.maxcapacity += RESP_CAPACITY;
		pu.capacity += capacity;
	}

	override string PickupMessage() {
		string msg = super.PickupMessage();
		string status;
		if (capacity >= maxcapacity) {
			status = "It is full.";
		}
		else if (capacity == 0) {
			status = "It is empty.";
		}
		else {
			status = string.format("It is at %d percent capacity", AirPercent());
		}
		return string.format(""..msg.." "..status);
	}

	override int getsbarnum(int flags){return int(100 * (double(capacity)/double(maxcapacity)));}

	double AirPercent() { return 100 * (double(capacity)/double(maxcapacity)); }
}
