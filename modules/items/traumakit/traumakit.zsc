#include "modules/items/traumakit/traumakit_painkiller.zsc"
#include "modules/items/traumakit/traumakit_forceps.zsc"
#include "modules/items/traumakit/traumakit_stapler.zsc"
#include "modules/items/traumakit/traumakit_sutures.zsc"
#include "modules/items/traumakit/traumakit_biofoam.zsc"
#include "modules/items/traumakit/traumakit_2f.zsc"
#include "modules/items/traumakit/traumakit_saline.zsc"

class UaS_TraumaKit : HDWeapon {
	string statusMessage;
	StatusInfo currentMessage;
	WoundInfo currentWound;

	Default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a personal trauma kit.";
		Inventory.Icon "ROCKA0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		//+WEAPON.NOAUTOFIRE;
	}
	override double weaponbulk(){ return 20; }

	override void DoEffect() {
		if (!(owner.player.readyweapon is 'UaS_TraumaKit')) { return; }

		statusMessage = "\cyField Medical Kit\n\n";

		RefreshStatus();

		switch (weaponstatus[TK_SELECTED]) {
			case T_PAINKILLER:
				HandlePainkiller();
				break;
			case T_FORCEPS:
				HandleForceps();
				break;
			case T_SALINE:
				HandleSaline();
				break;
			case T_BIOFOAM:
				HandleBiofoam();
				break;
			case T_STAPLER:
				HandleStapler();
				break;
			case T_SUTURES:
				HandleSutures();
				break;
			case T_2F:
				Handle2F();
				break;
		}

		A_WeaponMessage(statusMessage);

		if ((owner.player.cmd.buttons & BT_USER2) && !(owner.player.oldbuttons & BT_USER2)) {
			CycleTools();
		}
	}

	void CycleTools() {
		weaponstatus[TK_SELECTED] = (weaponstatus[TK_SELECTED] + 1) % 7;
		weaponstatus[TK_HOLD] = 0;
		currentmessage.text = "";
		currentmessage.timeout = 0;
	}

	void RefreshStatus() {
		// Deselect closed current wound
		if (currentWound && currentWound.open == 0) { currentWound = null; }

		// Display current wound, if any
		if (currentWound) {
			DebugStatus();
			statusMessage = statusMessage.."\crTreating:\n";
			statusMessage = statusMessage.."\ca"..currentWound.description.."\n\n";
		}
		else {
			DebugStatus();
			statusMessage = statusMessage.."\crNot treating any wound.\n";
			statusMessage = statusMessage.."\cuPress Zoom to check treatable wounds.\n\n";
			if (owner.player.cmd.buttons & BT_ZOOM) { currentWound = GetWound(); }
			A_WeaponMessage(statusMessage);
			return;
		}

		// Tick down transient messages
		if (currentmessage.timeout > 0) {
			statusmessage = statusmessage..currentmessage.text;
			currentmessage.timeout--;
		}
	}

	WoundInfo GetWound() {
		UaS_WoundHandler wh = UaS_WoundHandler(owner.FindInventory('UaS_WoundHandler'));
		if (!wh) { console.printf("No wound handler!"); return null; }
		if (wh.critwounds.size() > 0) {
			for (int i = wh.critwounds.size() - 1; i >= 0; i--) {
				if (wh.critwounds[i].open > 0) { return wh.critwounds[i]; }
			}
		}
		return null;
	}

	void DebugStatus() {
		if (!owner) { return; }
		let ownr = HDPlayerPawn(owner);
		statusMessage = statusMessage.."\n";
		statusMessage = statusMessage.."Open Wounds "..ownr.woundcount.."\n";
		statusMessage = statusMessage.."Unstable Wounds "..ownr.unstablewoundcount.."\n";
		statusMessage = statusMessage.."Old Wounds "..ownr.oldwoundcount.."\n";
	}

	struct StatusInfo {
		string text;
		int timeout;
	}

	enum ToolModes {
		T_PAINKILLER,
		T_FORCEPS,
		T_SALINE,
		T_BIOFOAM,
		T_STAPLER,
		T_SUTURES,
		T_2F,
	}

	enum KitFlags {
		TK_SELECTED,
		TK_BUTTON,
		TK_HOLD
	}
}
