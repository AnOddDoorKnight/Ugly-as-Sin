class UaS_TraumaKit : HDWeapon {
	string statusMessage;
	StatusInfo currentMessage;
	WoundInfo currentWound;


	Default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a personal trauma kit.";
		Inventory.Icon "ROCKA0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+WEAPON.NO_AUTO_SWITCH;
		//+WEAPON.NOAUTOFIRE;
	}
	override double weaponbulk(){ return 20; }

	override void DoEffect() {

		statusMessage = "\cyField Medical Kit\n\n";

		if (currentWound && currentWound.open == 0) { currentWound = null; }

		if (currentWound) {
			DebugStatus();
			statusMessage = statusMessage.."\crTreating:\n";
			statusMessage = statusMessage.."\ca"..currentWound.description.."\n\n";
		}
		else {
			DebugStatus();
			statusMessage = statusMessage.."\crNot treating any wound.\n";
			statusMessage = statusMessage.."\ccPress Zoom to check treatable wounds.\n\n";
			if (owner.player.cmd.buttons & BT_ZOOM) { currentWound = GetWound(); }
			A_WeaponMessage(statusMessage);
			return;
		}

		switch (weaponstatus[TK_SELECTED]) {
			case T_PAINKILLER:
				HandlePainkiller();
				break;
			case T_FORCEPS:
				HandleForceps();
				break;
			case T_SALINE:
				HandleSaline();
				break;
			case T_BIOFOAM:
				HandleBiofoam();
				break;
			case T_STAPLER:
				HandleStapler();
				break;
			case T_SUTURES:
				HandleSutures();
				break;
			case T_2F:
				Handle2F();
				break;
		}

		if (currentmessage.timeout > 0) {
			statusmessage = statusmessage..currentmessage.text;
			currentmessage.timeout--;
		}

		A_WeaponMessage(statusMessage);

		// Cycle tools
		if ((owner.player.cmd.buttons & BT_USER2) && !(owner.player.oldbuttons & BT_USER2)) {
			CycleTools();
		}
	}

	void CycleTools() {
		weaponstatus[TK_SELECTED] = (weaponstatus[TK_SELECTED] + 1) % 7;
		weaponstatus[TK_HOLD] = 0;
		currentmessage.text = "";
		currentmessage.timeout = 0;
	}

	void HandlePainkiller() {
		statusMessage = statusmessage.."\cjAnaesthetic\n";
		statusMessage = statusmessage.."\cuFast-acting local painkiller.\n\n";
		if((owner.player.cmd.buttons & BT_ATTACK) && !(owner.player.oldbuttons & BT_ATTACK)) {
			if(currentWound.numb) {
				currentmessage.text = "The wound is already numb.";
				currentmessage.timeout = 5*35;
			}
			else {
				owner.A_StartSound("misc/bulletflesh",CHAN_WEAPON);
				currentWound.numb = true;
				currentmessage.text = "Anaesthetic injected.";
				currentmessage.timeout = 5*35;
				HDPlayerPawn(owner).A_MuzzleClimb(
					(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1))/10,
					(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1))/10,
					(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1))/10,
					(frandom[uas_tk](-3,3),frandom[uas_tk](-3,3))/10
				);
			}
		}
	}

	void HandleForceps() {
		statusMessage = statusmessage.."\cjForceps\n";
		statusMessage = statusmessage.."\cuPrecision tool for removing obstructions.\n\n";
		if ((owner.player.cmd.buttons & BT_ATTACK)) {
			currentmessage.text = "You hold the wound open.\n";
			// Display obstruction status
			if (currentWound.obstructed > 0) {
				currentmessage.text = currentmessage.text.."There is some foreign obstruction.\n";
				currentmessage.timeout = 1*35;
			}
			else {
				currentmessage.text = currentmessage.text.."It appears clear of obstructions.\n";
				currentmessage.timeout = 1*35;
				return;
			}

			if((owner.player.cmd.buttons & BT_UNLOAD)) {
				weaponstatus[TK_HOLD]--;
				if (!currentWound.numb && !(owner.player.oldbuttons & BT_UNLOAD)) {
					owner.A_StartSound("*usemeds",CHAN_VOICE);
					currentmessage.text = currentmessage.text.."Probing the w--";
					owner.A_Log("\cgOW FUCK", true);
					HDPlayerPawn(owner).A_MuzzleClimb(
						(frandom[uas_tk](-5,5),frandom[uas_tk](-5,5)),
						(frandom[uas_tk](-3,3),frandom[uas_tk](-3,3)),
						(frandom[uas_tk](-2,2),frandom[uas_tk](-2,2)),
						(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1))
					);
				}
				else if (currentWound.numb) {
					currentmessage.text = currentmessage.text.."Probing the wound...";
					if (weaponstatus[TK_HOLD] <= 0) {
						currentWound.obstructed -= random[uas_tk](1,10);
						owner.A_StartSound("misc/smallslop",CHAN_BODY);
						if(random[uas_tk](0,1)) { owner.A_StartSound("*grunt",CHAN_VOICE); }
						HDPlayerPawn(owner).A_MuzzleClimb(
							(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
							(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
							(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
							(frandom[uas_tk](-3,3),frandom[uas_tk](-3,3))
						);
						weaponstatus[TK_HOLD] = random[uas_tk](20,40);
						if (random[uas_tk](0,50) > currentWound.obstructed) {
							currentWound.obstructed = 0;
							owner.A_StartSound("misc/bulletflesh",CHAN_BODY);
							owner.damagemobj(owner,owner,1,"staples");
							owner.A_Log("You pull a randomized silly obstruction out of your wound.", true);
						}
					}
				}
			}
		}
	}

	void HandleSaline() {
		CycleTools();
		statusMessage = statusmessage.."\cjSaline\n";
		statusMessage = statusmessage.."\cuSterile flushing/cleaning solution.\n\n";
	}

	void HandleBioFoam() {
		CycleTools();
		statusMessage = statusmessage.."\cjBiofoam\n";
		statusMessage = statusmessage.."\cuAbsorbant antispetic flesh-analogue.\n\n";
	}

	void HandleStapler() {
		//CycleTools();
		statusMessage = statusmessage.."\cjStapler\n";
		statusMessage = statusmessage.."\cuManual hand-stapler.\n\n";
		if (currentWound.open > 0) {
			currentmessage.text = "The wound is open.\n";
			currentmessage.timeout = 1*35;
		}
		else {
			currentmessage.text = "The wound is closed.\n";
			currentmessage.timeout = 1*35;
			return;
		}
		if (weaponstatus[TK_HOLD] > 0) { weaponstatus[TK_HOLD]--; }
		if ((owner.player.cmd.buttons & BT_ATTACK) && !(owner.player.oldbuttons & BT_ATTACK) && (weaponstatus[TK_HOLD] <= 0)){
			owner.A_StartSound("medikit/staple",CHAN_WEAPON);
			if (!currentWound.numb) {
				owner.damagemobj(owner,owner,1,"staples");
				weaponstatus[TK_HOLD] = 35;
			}
			else {
				owner.A_StartSound("*grunt",CHAN_VOICE);
				weaponstatus[TK_HOLD] = 15;
			}
			HDPlayerPawn(owner).A_MuzzleClimb(
				(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1)),
				(frandom[uas_tk](-1,1),frandom[uas_tk](-1,1))
			);
			currentWound.open = max(currentWound.open - random[uas_tk](5,10), 0);
		}
	}

	void HandleSutures() {
		//CycleTools();
		statusMessage = statusmessage.."\cjSutures\n";
		statusMessage = statusmessage.."\cuHook needle and biodegradable thread.\n\n";

		if (currentWound.open > 0) {
			currentmessage.text = "The wound is open.\n";
			currentmessage.timeout = 1*35;
		}
		else {
			currentmessage.text = "The wound is closed.\n";
			currentmessage.timeout = 1*35;
			return;
		}

		// force player to restart if pained last time
		if (weaponstatus[TK_HOLD] < 0) {
			if(!(owner.player.oldbuttons & BT_ATTACK)) { weaponstatus[TK_HOLD] = 0; }
			return;
		}

		// start suture
		if ((owner.player.cmd.buttons & BT_ATTACK) && (weaponstatus[TK_HOLD] == 0)) {
			owner.A_StartSound("bandage/rustle",CHAN_BODY,CHANF_OVERLAP);
			weaponstatus[TK_HOLD] = 35;
		}

		// finish suture
		if ((owner.player.cmd.buttons & BT_ATTACK)){
			weaponstatus[TK_HOLD] = max(weaponstatus[TK_HOLD]-1, 0);

			if (weaponstatus[TK_HOLD] == 10) {
				if(!currentWound.numb) {
					owner.damagemobj(owner,owner,1,"staples");
					weaponstatus[TK_HOLD] = -1;
					currentWound.open = max(currentWound.open - random[uas_tk](5,10), 0);
				}
				else {
					owner.A_StartSound("*grunt",CHAN_VOICE);
					currentWound.open = max(currentWound.open - random[uas_tk](5,10), 0);
				}
			}
		}
	}

	void Handle2F() {
		CycleTools();
		statusMessage = statusmessage.."\cjSecond Flesh\n";
		statusMessage = statusmessage.."\cuAdvanced stem cell and nutrient cocktail.\n\n";
	}

	WoundInfo GetWound() {
		UaS_WoundHandler wh = UaS_WoundHandler(owner.FindInventory('UaS_WoundHandler'));
		if (!wh) { console.printf("No wound handler!"); return null; }
		if (wh.critwounds.size() > 0) {
			for (int i = wh.critwounds.size() - 1; i >= 0; i--) {
				if (wh.critwounds[i].open > 0) { return wh.critwounds[i]; }
			}
		}
		return null;
	}

	void DebugStatus() {
		if (!owner) { return; }
		let ownr = HDPlayerPawn(owner);
		statusMessage = statusMessage.."\n";
		statusMessage = statusMessage.."Open Wounds "..ownr.woundcount.."\n";
		statusMessage = statusMessage.."Unstable Wounds "..ownr.unstablewoundcount.."\n";
		statusMessage = statusMessage.."Old Wounds "..ownr.oldwoundcount.."\n";
	}

	struct StatusInfo {
		string text;
		int timeout;
	}

	enum ToolModes {
		T_PAINKILLER,
		T_FORCEPS,
		T_SALINE,
		T_BIOFOAM,
		T_STAPLER,
		T_SUTURES,
		T_2F,
	}

	enum KitFlags {
		TK_SELECTED,
		TK_BUTTON,
		TK_HOLD
	}

}
