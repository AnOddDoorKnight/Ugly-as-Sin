class WoundInfo : thinker {
	string description;
	bool numb;
	int dirty;
	int obstructed;
	int open;
	int cavity;
	int timer;
	int size;
	int infection;
	bool clear;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		ChangeStatNum(STAT_STATIC);
	}

	void TickWound() {
		timer--;
		if (timer <= 0) {
			int toHeal = (
				random[uas_wi](0, 10) +
				random[uas_wi](0, 10) +
				random[uas_wi](0, 10)
			) / 3;

			if (toHeal > AverageStatus()) {
				open = max(open - 1, 0);
				cavity = max(cavity - 1, 0);
				infection = max(infection - 1, 0);
			}
			else {
				infection = min(infection + 1, 100);
			}

			if (toHeal >= AverageStatus() * 2) {
				clear = true;
			}
			timer = (random[uas_wi](5, 10) * 35) / size;
		}
	}

	int AverageStatus() {
		int retvalue;
		retvalue += dirty;
		retvalue += obstructed;
		retvalue += open;
		retvalue += cavity;
		retvalue += infection;
		retvalue /= 5;
		return retvalue;
	}
}

// Static methods
extend class WoundInfo {
	static WoundInfo create(int newsize) {
		int sizemin = clamp(newsize * 10, 0, 100);
		int sizemax = clamp(newsize * 20, 0, 100);
		SetRandomSeed[uas_wi](level.maptime);
		WoundInfo nw = new("WoundInfo");
		nw.numb = false;
		nw.dirty = random[uas_wi](sizemin, sizemax);
		nw.obstructed = randompick[uas_wi](0,0,1) * random[uas_wi](sizemin, sizemax);
		nw.open = random[uas_wi](sizemin, sizemax);
		nw.cavity = (nw.obstructed + nw.open) * 0.5;
		nw.infection = (nw.dirty + nw.obstructed + nw.open + nw.cavity) * 0.25;
		nw.timer = (random[uas_wi](5, 10) * 35) / newsize;
		nw.size = newsize;
		nw.description = WoundDescription(newsize);
		return nw;
	}

	static string WoundDescription(int newsize) {
		int sevmax = WoundInfo.severity.size()-1;
		int typmax = WoundInfo.type.size()-1;
		int locmax = WoundInfo.location.size()-1;
		int parmax = WoundInfo.bodypart.size()-1;
		return string.format("%s %s, %s %s",
			WoundInfo.severity[min(random[uas_wi](newsize, sevmax), sevmax)],
			WoundInfo.type[random[uas_wi](0, typmax)],
			WoundInfo.location[random[uas_wi](0, locmax)],
			WoundInfo.bodypart[random[uas_wi](0, parmax)]
		);
	}

	static const string[] severity = { "minor","small","superficial","moderate","medium","large","serious","critical" };
	static const string[] type = { "incision","laceration","puncture","avulsion","penetration" };
	static const string[] location = { "left","right" };
	static const string[] bodypart = { "upper leg","lower leg","upper arm","lower arm","shoulder","hip","upper torso","lower torso" };
}
