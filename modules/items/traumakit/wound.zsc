class WoundInfo : thinker {
	string description;
	bool numb;
	int dirty;
	int obstructed;
	int open;
	int cavity;
	int timer;
	int size;
	int infection;
	bool clear;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		ChangeStatNum(STAT_STATIC);
	}

	void TickWound() {
		timer--;
		if (timer <= 0) {
			// Random normal distribution for heal probability
			int toHeal = (
				random[uas_wi](0, 10) +
				random[uas_wi](0, 10) +
				random[uas_wi](0, 10)) / 3;

			// Wound heals some points
			if (toHeal >= AverageStatus()) {
				open = max(open - 1, 0);
				cavity = max(cavity - 1, 0);
				dirty = max(dirty - 1, 0);
				obstructed = max(obstructed - 1, 0);
				infection = max(infection - 1, 0);
			}

			// Infection increases
			if (toHeal <= (AverageStatus() + infection)) {
				infection = min(infection + 1, 100);
			}

			if (AverageStatus() <= 1) {
				clear = true;
			}
			timer = random[uas_wi](1,3) * 35;
		}
	}

}

// Status methods
extend class WoundInfo {
	int AverageStatus() {
		int retvalue;
		retvalue += dirty;
		retvalue += obstructed;
		retvalue += open;
		retvalue += cavity;
		//retvalue += infection;
		retvalue /= 4; //5;
		return retvalue;
	}

	string WoundStatus () {
		string status;
		if (open <= 0) { status = "The wound is "..statuscolor(open).."closed\c-,\nand cannot be treated further.\n"; return status; }
		else { status = "The wound is "..statuscolor(open).."open\c-\n"; }

		status = status..dirtystatus()..obstructstatus()..cavitystatus();

		return status;
	}

	string numbstatus() {
		if (numb) { return "It is \cdnumbed\c-\n"; }
		return "It is \crnot numb.\n";
	}

	string dirtystatus() {
		if (dirty >= 60) { return "It is "..statuscolor(dirty).."filthy\c-.\n"; }
		if (dirty >= 50) { return "It is "..statuscolor(dirty).."very dirty\c-.\n"; }
		if (dirty >= 40) { return "It is "..statuscolor(dirty).."somewhat dirty\c-.\n"; }
		if (dirty >= 30) { return "It is "..statuscolor(dirty).."a bit dirty\c-.\n"; }
		if (dirty >= 20) { return "It is "..statuscolor(dirty).."almost clean\c-.\n"; }
		if (dirty >= 10) { return "It is "..statuscolor(dirty).."acceptably clean\c-.\n"; }
		return "It is "..statuscolor(dirty).."completely clean\c-.\n";
	}

	string obstructstatus() {
		if (obstructed >= 50) { return "There are "..statuscolor(obstructed).."many obstructions\c-.\n"; }
		if (obstructed >= 40) { return "There are "..statuscolor(obstructed).."several obstructions\c-.\n"; }
		if (obstructed >= 30) { return "There are "..statuscolor(obstructed).."a few obstructions\c-.\n"; }
		if (obstructed >= 20) { return "There are "..statuscolor(obstructed).."some obstructions\c-.\n"; }
		if (obstructed >= 10) { return "It appears "..statuscolor(obstructed).."mostly free of obstructions\c-.\n"; }
		return "There are "..statuscolor(obstructed).."no apparent obstructions\c-.\n";
	}

	string cavitystatus() {
		if (cavity >= 80) { return "There is "..statuscolor(cavity).."severe tissue damage\c-.\n"; }
		if (cavity >= 60) { return "There is "..statuscolor(cavity).."significant tissue damage\c-.\n"; }
		if (cavity >= 40) { return "There is "..statuscolor(cavity).."moderate tissue damage\c-.\n"; }
		if (cavity >= 20) { return "There is "..statuscolor(cavity).."some tissue damage\c-.\n"; }
		if (cavity >= 10) { return "There is "..statuscolor(cavity).."little tissue damage\c-.\n"; }
		return "There is "..statuscolor(cavity).."no treatable tissue damage\c-.\n";
	}

	string statuscolor(int amount) {
		if (amount >= 90) { 	 return "\cm"; } // black
		else if (amount >= 80) { return "\cr"; } // dark red
		else if (amount >= 70) { return "\ca"; } // brick
		else if (amount >= 60) { return "\cx"; } // fire
		else if (amount >= 50) { return "\ci"; } // orange
		else if (amount >= 40) { return "\ck"; } // yellow
		else if (amount >= 30) { return "\cs"; } // dark brown
		else if (amount >= 20) { return "\cq"; } // dark green
		else if (amount >= 10) { return "\cd"; } // green
		else if (amount >=  0) { return "\cd"; } // grey
		return "\cj"; // white
	}
}

// Static methods
extend class WoundInfo {
	static WoundInfo create(int newsize) {
		int sizemin = clamp(newsize * 2, 0, 100);
		int sizemax = clamp(newsize * 20, 0, 100);
		SetRandomSeed[uas_wi](level.maptime);
		WoundInfo nw = new("WoundInfo");
		nw.numb = false;
		nw.dirty = random[uas_wi](sizemin, sizemax);
		nw.obstructed = randompick[uas_wi](0,1) * random[uas_wi](sizemin, sizemax);
		nw.open = random[uas_wi](sizemin, sizemax);
		nw.cavity = randompick[uas_wi](0,1) * (nw.obstructed + nw.open) * 0.5;
		nw.infection = (nw.dirty + nw.obstructed + nw.open + nw.cavity) * 0.25;
		nw.timer = (random[uas_wi](10, 30) * 35);
		nw.size = newsize;
		nw.description = WoundDescription(newsize);
		return nw;
	}

	static string WoundDescription(int newsize) {
		int sevmax = WoundInfo.severity.size()-1;
		int typmax = WoundInfo.type.size()-1;
		int locmax = WoundInfo.location.size()-1;
		int parmax = WoundInfo.bodypart.size()-1;
		return string.format("%s %s, %s %s",
			WoundInfo.severity[min(random[uas_wi](newsize, sevmax), sevmax)],
			WoundInfo.type[random[uas_wi](0, typmax)],
			WoundInfo.location[random[uas_wi](0, locmax)],
			WoundInfo.bodypart[random[uas_wi](0, parmax)]
		);
	}

	static const string[] severity = { "minor","small","superficial","moderate","medium","large","serious","critical" };
	static const string[] type = { "incision","laceration","puncture","avulsion","penetration" };
	static const string[] location = { "left","right" };
	static const string[] bodypart = { "upper leg","lower leg","upper arm","lower arm","shoulder","hip","upper torso","lower torso" };
}
