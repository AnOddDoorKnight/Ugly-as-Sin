class UaS_WoundHandler : Inventory {
	int lastwounds;
	double woundaverage;
	array<WoundInfo> critwounds;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		ManageWounds();
	}

	void ManageWounds() {
		HDPlayerPawn plr = HDPlayerPawn(owner);

		// get difference from last tick
		int diffwounds = max(plr.oldwoundcount,0) - lastwounds; // gotta clamp this to avoid false positives

		if (diffwounds > 0) { // add new stable wounds
			console.printf("new wound added at tick "..level.maptime);
			critwounds.push(WoundInfo.Create(diffwounds));
			DebugWoundList();
		}
		else if (diffwounds < 0) { // remove a passively-healed wound
			console.printf("old wound removed at tick "..level.maptime);
			critwounds[0].destroy();
			critwounds.delete(0);
			DebugWoundList();
		}

		for(int i = 0; i <= critwounds.size() - 1; i++) {
			if (critwounds[i]) {
				critwounds[i].TickWound();
			}
			else { critwounds.delete(i); }
			// Start ticking off closed wounds
			/*if (critwounds[i].open == 0 && critwounds[i].timer < 0) {
				critwounds[i].timer = (
					critwounds[i].dirty +
					critwounds[i].obstructed +
					critwounds[i].cavity +
					critwounds[i].size);
				critwounds[i].timer /= 4;		// average remaining unfixed status
				critwounds[i].timer *= 35;		// convert to seconds
				critwounds[i].timer = max(critwounds[i].timer, 2100);	// at least 1 minute to roll off
			}
			// decrement timer
			if (critwounds[i].timer > 0) {
				//console.printf("ticking "..i.." at "..critwounds[i].timer);
				critwounds[i].timer = max(critwounds[i].timer - 1, 0);
			}
			// Roll off closed wounds when timer runs out
			if (critwounds[i].timer == 0) {
				console.printf("closed wound removed at tick "..level.maptime);
				plr.oldwoundcount = max(plr.oldwoundcount - critwounds[i].size, 0);
				critwounds[i].destroy();
				critwounds.delete(i);
				DebugWoundList();
			}*/
		}

		// sync count for next tick
		lastwounds = max(plr.oldwoundcount, 0); // gotta clamp this to avoid false positives
	}

	void DebugWoundList() {
		for (int i = 0; i <= critwounds.size() - 1; i++) {
			console.printf("W"..i..": "..critwounds[i].description);
		}
	}
}
