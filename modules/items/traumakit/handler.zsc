#include "modules/items/traumakit/wound.zsc"

class UaS_WoundHandler : Inventory {
	//int oldunstable, oldstable, oldopen;
	//double woundaverage;
	array<WoundInfo> critwounds;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		ManageWounds();
	}

	void ManageWounds() {
		HDPlayerPawn plr = HDPlayerPawn(owner);

		// get difference in wound counts
		//int diffopen = max(plr.woundcount, 0) - oldopen; // clamp to avoid false positives
		//int diffunstable = max(plr.unstablewoundcount, 0) - oldunstable; // clamp to avoid false positives
		//int diffstable = max(plr.oldwoundcount, 0) - oldstable; // clamp to avoid false positives

		// try and guess what happened with HD's wound counters
		/*
		if (diffopen < 0 && diffunstable > 0) {
			console.printf("open wound bandaged %i %i", diffopen, diffunstable);
		}
		if (diffopen > 0 && diffunstable < 0) {
			console.printf("unstable wound reopened %i %i", diffopen, diffunstable);
		}
		if (diffunstable < 0 && diffstable > 0) {
			console.printf("unstable wound settled %i %i", diffunstable, diffstable);
		}
		if (diffstable < 0) {
			console.printf("stable wound healed %i", diffstable);
		}*/
		//if (diffunstable > 0) { critwounds.push(WoundInfo.Create(diffunstable)); }
		//else if (diffstable < 0) { RemoveWound(0); }

		int diffwounds = plr.oldwoundcount - (5 * (critwounds.size()));
		//if(level.maptime % 35 == 0) { console.printf("diffwounds %i", diffwounds); }
		if (diffwounds >= 5) { critwounds.push(WoundInfo.Create(diffwounds)); } // Create a new wound entry every 5 or more points
		if (diffwounds < -5) { RemoveWound(0); } // or remove oldest wound if passively healed at least 5 points

		// iterate wound array, drop any wounds marked "clear"
		for(int i = 0; i <= critwounds.size() - 1; i++) {
			if (!critwounds[i]) { critwounds.delete(i); continue; }
			if (critwounds[i].clear) {
				console.printf("Cured "..critwounds[i].description);
				plr.oldwoundcount = max(plr.oldwoundcount - critwounds[i].size, 0);
				RemoveWound(i);
				continue;
			}
			critwounds[i].TickWound();
		}

		//oldopen = max(plr.woundcount, 0); // clamp to avoid false positives
		//oldunstable = max(plr.unstablewoundcount, 0); // clamp to avoid false positives
		//oldstable = max(plr.oldwoundcount, 0); // clamp to avoid false positives
	}

	void RemoveWound(int w) {
		critwounds[w].destroy();
		critwounds.delete(w);
	}
}
