#include "modules/items/traumakit/wound.zsc"

class UaS_WoundHandler : Inventory {
	int lastwounds;
	double woundaverage;
	array<WoundInfo> critwounds;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		ManageWounds();
	}

	void ManageWounds() {
		HDPlayerPawn plr = HDPlayerPawn(owner);
		int diffwounds = max(plr.oldwoundcount,0) - lastwounds; // clamp to avoid false positives

		// passively add or remove based on player oldwoundwound
		if (diffwounds > 0) { critwounds.push(WoundInfo.Create(diffwounds)); }
		else if (diffwounds < 0) { RemoveWound(0); }

		// iterate wound array
		for(int i = 0; i <= critwounds.size() - 1; i++) {
			if (!critwounds[i]) { critwounds.delete(i); continue; }
			if (critwounds[i].clear) {
				plr.oldwoundcount = max(plr.oldwoundcount - critwounds[i].size, 0);
				RemoveWound(i);
				continue;
			}
			critwounds[i].TickWound();
		}

		lastwounds = max(plr.oldwoundcount, 0); // clamp to avoid false positives
	}

	void RemoveWound(int w) {
		critwounds[w].destroy();
		critwounds.delete(w);
	}

	void DebugWoundList() {
		for (int i = 0; i <= critwounds.size() - 1; i++) {
			console.printf("W"..i..": "..critwounds[i].description);
		}
	}
}
