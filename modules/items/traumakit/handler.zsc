#include "modules/items/traumakit/wound.zsc"

class UaS_WoundHandler : Inventory {
	array<WoundInfo> critwounds;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		ManageWounds();
	}

	void ManageWounds() {
		HDPlayerPawn plr = HDPlayerPawn(owner);
		if(!plr) return;

		// iterate wound array, drop any wounds marked "clear"
		// Do this first to hopefully avoid dropping or double-counting
		for(int i = 0; i <= critwounds.size() - 1; i++) {
			if (!critwounds[i]) { critwounds.delete(i); continue; }
			if (critwounds[i].clear) {
				owner.A_Log("Cured "..critwounds[i].description, true);
				plr.oldwoundcount = max(plr.oldwoundcount - critwounds[i].size, 0);
				RemoveWound(i);
				continue;
			}
			critwounds[i].TickWound();
		}

		// tabulate new wound array total points
		int knownwounds;
		for (int i = 1; i < critwounds.size(); i++) {
			knownwounds += critwounds[i].size;
		}

		//compare
		int diffwounds = plr.oldwoundcount - knownwounds;

		// Create a new wound entry every 3 or more points
		if (diffwounds > 0) {
			int newsize = random[uas_wh](1, 5);
			newsize = min(newsize, diffwounds);
			critwounds.push(WoundInfo.Create(newsize));
			if (UaS_Debug & Med) { console.printf("created "..critwounds[critwounds.size() - 1].description.." with size "..newsize); }
			diffwounds -= newsize;
		}

		 // or remove oldest wound if passively healed at least 3 points
		if (diffwounds < 0) {
			if (UaS_Debug & Med) { console.printf("passively healed "..critwounds[0].description); }
			RemoveWound(0);
			diffwounds += 3;
		}

	}

	void RemoveWound(int w) {
		critwounds[w].destroy();
		critwounds.delete(w);
	}
}
