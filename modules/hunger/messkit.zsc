class UaS_MessKit : HDWoundFixer {
	UaS_HungerTracker tracker;
	int biteSize;
	int mealSize;
	int drinkSize;
	int sipSize;
	double speedFactor;
	string flavor;
	bool rationOpen;

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up messkit.";
		Inventory.Icon "HSCVB0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
	}

	override double, int weaponbulk(){
		return 15,0;
	}

	override void DoEffect() {
		//Set "amount" next to messkit as available food items
		amount = owner.countinv("UaS_Ration");
		speedFactor = clamp(double(UaS_HungerTimeScale) / 10, 1, 12);
		super.DoEffect();
	}

	override inventory CreateTossable(int amt) {
		//Drop both current meal and messkit if stunned
		let ownr = HDPlayerPawn(owner);
		if(ownr.stunned) {
			UaS_TossOpened(true);
			amount = 1;
			return super.CreateTossable();
		}
		//Toss unopened rations
		if(owner.countinv("UaS_Ration") > 1) {
			owner.TakeInventory("UaS_Ration",1);
			return inventory(Spawn("UaS_Ration", owner.pos));
		}
		else if(owner.countinv("UaS_Ration") == 1) {
			if(rationOpen == true) {
				//Throw away uneaten portion
				UaS_TossOpened(true);
				return NULL;
			}
			else {
				//Toss last unopened ration
				owner.TakeInventory("UaS_Ration",1);
				return inventory(Spawn("UaS_Ration", owner.pos));
			}
		}
		//Toss messkit itself
		else {
			//Can't toss the original unless there's at least one!
			amount++;
		}
		return super.CreateTossable();
	}

	States {
		Spawn:
			HSCV B -1;
			Stop;
		Select:
			TNT1 A 10 UaS_SelectText();
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
			TNT1 A 0 EatOrDrink(1);
			goto nope;
		AltFire:
			TNT1 A 0 EatOrDrink(2);
			goto nope;
		Eat:
			TNT1 A 0 UaS_CheckConsumables(1);
			goto nope;
		Scoop:
			TNT1 A 0 UaS_TakeScoop();
			TNT1 A random(15,20);
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A 0 UaS_Consume();
			TNT1 A random(8,12);
			TNT1 A 0 A_Refire("Consume");
			goto Swallow;
		Drink:
			TNT1 A 0 UaS_CheckConsumables(2);
			goto nope;
		Sip:
			TNT1 A 0 UaS_Sip();
			TNT1 A 1;
			TNT1 A 0 A_Refire("Sip");
			goto Swallow;
		Reload:
			TNT1 A random(15,20) UaS_OpenFood();
			goto nope;
		Swallow:
			TNT1 A random(8,12) A_PlaySound("weapons/pocket");
			goto nope;
		User4:
		Toss:
			TNT1 A 1 { invoker.UaS_TossOpened(true); }
			goto nope;
		Firemode:
		DisplayStatus:
			TNT1 A 1 DisplayStatus();
			goto nope;
	}

	action void DisplayStatus() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(!invoker.tracker) { return; }
		invoker.tracker.lastcalories = invoker.tracker.calories + 250;
		invoker.tracker.lastwater = invoker.tracker.water + 200;
	}

	//Displayed when the messkit is opened for use
	action void UaS_SelectText() {
		DisplayStatus();
		if(!getcvar("hd_helptext")) return;
		string message = "\cjMESS KIT\c-\n\n\n";
		if(CVar.GetCVar('UaS_HungerAutoselect', invoker.owner.player).GetBool()) { message = message.."Hold Fire to eat and drink.\n\n"; }
		else {
			message = message.."Hold Fire to eat,\n";
			message = message.."and AltFire to drink.\n\n";
		}
		message = message.."Reload opens a new ration.\n\n";
		//message = message.."AltReload opens a water ration.\n\n";
		message = message.."Unload dumps the current ration,\n";
		message = message.."discarding all remaining contents";
		A_WeaponMessage(message, 175);
	}

	//Determine whether to eat or drink
	action state EatOrDrink(int userIntent) {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(!invoker.tracker) { return ResolveState(null); }

		// If CVar set, prioritize depending on which one the player needs more.
		if(CVar.GetCVar('UaS_HungerAutoselect', invoker.owner.player).GetBool()) {
			if(invoker.tracker.calories <= invoker.tracker.water || invoker.drinkSize <= 0) { return ResolveState("Eat"); }
			else if (invoker.tracker.water < invoker.tracker.calories || invoker.mealSize <= 0) { return ResolveState("Drink"); }
		}

		// Otherwise let the player pick
		if(userIntent == 1) { return ResolveState("Eat"); }
		else if(userIntent == 2) { return ResolveState("Drink"); }

		return ResolveState(null);
	}

	//Makes sure the player has a food item open and food available.
	//If no food and open, toss empty. If not open, give message.
	action state UaS_CheckConsumables(int type = 1) {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(invoker.rationOpen == true) {
			if(type == 1 && invoker.mealSize > 0) {
				if(invoker.tracker.calories >= 2500) {
					A_WeaponMessage("You're full.\nCouldn't eat another bite.", 175);
					return ResolveState("nope");
				}
				return ResolveState("Scoop");
			}
			if(type == 2 && invoker.drinkSize > 0) {
				if(invoker.tracker.water >= 2500) {
					A_WeaponMessage("You're full.\nCouldn't drink another drop.", 175);
					return ResolveState("nope");
				}
				A_PlaySound("misc/smallslop");
				return ResolveState("Sip");
			}
			invoker.UaS_TossOpened(false);
		}
		if(invoker.mealSize <=0 && invoker.drinkSize <=0) {
			A_WeaponMessage("Nothing to eat or drink!\n\nHave you opened a ration?", 175);
		}
		return ResolveState(null);
	}

	//Takes a random-sized "bite" of the food
	action void UaS_TakeScoop() {
		double difference = clamp(2500 - invoker.tracker.calories, 0, 500);
		A_PlaySound("UaS/FoodScoop", CHAN_AUTO, frandom(0.3, 0.6));
		invoker.biteSize  = min(invoker.mealsize, 75 * invoker.speedFactor) * frandom(0.75,1.0);;
		invoker.biteSize *= (difference / 500.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 75 * invoker.speedFactor);
	}

	//"Chew" the food
	action state UaS_Consume() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(1,10) * invoker.speedFactor;
			A_PlaySound("weapons/pocket", CHAN_AUTO, frandom(0.25, 0.6));
			A_PlaySound("misc/fragroll", CHAN_AUTO, frandom(0.25, 0.7));
			invoker.mealSize -= clamp(chunk, 0, invoker.biteSize);
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			A_WeaponMessage(string.format("%s\n\n\nFood left: %i\nWater left: %i", invoker.flavor, invoker.mealSize, invoker.drinkSize), 175);
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	//Consume a random amount of water "drops" to simulate drinking
	action state UaS_Sip() {
		invoker.tracker = UaS_HungerTracker(FindInventory("UaS_HungerTracker", false));
		int drops = random(1,2) * invoker.speedFactor;
		for(int i = 1; i <= drops; i++) {
			invoker.sipsize += 1;
			invoker.tracker.water += 1;
			invoker.drinksize -= 1;
			A_WeaponMessage(string.format("%s\n\n\nFood left: %i\nWater left: %i", invoker.flavor, invoker.mealSize, invoker.drinkSize), 175);
			if(invoker.drinksize <= 0 || invoker.sipSize > random(25,50) * invoker.speedFactor) {
				invoker.sipsize = 0;
				return ResolveState("Swallow");
			}
		}
		return ResolveState(null);
	}

	//Open a new food ration if one isn't already open
	action void UaS_OpenFood() {
		if(countinv("UaS_Ration") > 0) {
			if(invoker.mealSize <= 0 && invoker.rationOpen == false) {
				A_PlaySound("imp/melee");
				invoker.mealSize = random(8,10)*50;
				invoker.drinkSize = 500;
				invoker.rationOpen = true;
				invoker.flavor = RandomFlavor();
				A_WeaponMessage(string.format("%s", invoker.flavor), 175);
			}
			else {
				A_WeaponMessage("You already have an opened ration!", 175);
			}
		}
		else {
			A_WeaponMessage("You have no more rations!", 175);
		}
	}

	//Toss opened ration
	void UaS_TossOpened(bool force = false) {
		if((drinkSize > 0 || mealSize > 0) && force == false) { return; }
		if(rationOpen == false) { return; }
		if(owner.getcvar("hd_helptext") && (mealsize > 0 || drinkSize > 0)) { A_WeaponMessage("Tossed leftovers. No 5-second rule here.", 175); }
		biteSize = 0;
		mealSize = 0;
		drinksize = 0;
		sipsize = 0;
		flavor = "";
		rationOpen = false;
		let empty=spawn("UaS_EmptyRation",owner.pos+(0,0,owner.height-8));
		empty.angle=owner.angle+2;
		empty.vel=owner.vel;
		empty.A_ChangeVelocity(3,1,1,CVF_RELATIVE);
		owner.TakeInventory("UaS_Ration",1);
	}

	//Generate literal flavortext
	action string RandomFlavor() {
		switch(random(0,5))	{
			case 0:
				return "\cb'Chili w/Beans'\c-\n\nThe cheese will back you up for a month...\n";
				break;
			case 1:
				return "\cb'Shredded Barbeque Beef'\c-\n\nAnd 'Carb Fortified Beverage Powder'\nto wash it down.\n";
				break;
			case 2:
				return "\cb'Meatballs in Marinara Sauce'\c-\n\nIts-a me, Doomguy!\n";
				break;
			case 3:
				return "\cb'Chili and Macaroni'\c-\n\nOh boy, that means Skittles for desert!\n";
				break;
			case 4:
				return "\cb'Spinach Mushrooms & Fettuccine'\c-\n\nMmm, eatin' fancy in the warzone tonight.\n";
				break;
			case 5:
				return "\cb' Rib Shaped BBQ Pork Patty'\c-\n\nJust like mamma used to make back home...\n";
				break;
		}
		return "'Generic Military Ration'";
	}
}
