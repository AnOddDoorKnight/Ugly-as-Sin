version "3.4"

class AlreadyInitialized : Inventory {}

class HDScav_Bootstrap : EventHandler {
	override void PlayerEntered(PlayerEvent e) {
		PlayerInfo player = players[e.PlayerNumber];
		if(!player.mo.countinv("AlreadyInitialized")) {
			player.mo.giveinventory("HDScav_HungerTracker", 1);
			player.mo.giveinventory("HDScav_FoodEater", 1);
			player.mo.giveinventory("HDScav_FoodItem", 3);
			player.mo.giveinventory("AlreadyInitialized", 1);
		}
	}

	override void WorldThingSpawned(WorldEvent e) {
		if(e.Thing.GetClassName() == "HDBP") {
			for(int i=1; i <= 3; i++) {
				let spawneditem = HDScav_FoodItem(Actor.Spawn("HDScav_FoodItem", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
				if(random(i,4) == 4) { break; }
			}
		}
	}
}

class HDScav_HungerTracker : CustomInventory {
	int calories;
	int lastcalories;
	int lastmeal;
	int minfatigue;
	string statusMessage;
	HDPlayerPawn ownr;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		calories = random(1500,2000);
	}

	override void DoEffect() {
		super.DoEffect();
		let ownr = HDPlayerPawn(owner);

		//Per minute
		if(level.time % 2100 == 1) {
			if(calories == 0) { minfatigue += 2; lastcalories += 60; }
			else { minfatigue -= 2; }
			if(minfatigue < 0) { minfatigue = 0; }
			if(hd_debug) { A_Log(string.format("Energy: %i\tMinFatigue: %i", calories, minfatigue)); }
			if(hd_debug) { A_Log(string.format("lastmeal: %i\tlastcalories: %i", lastmeal, lastcalories)); }
			HungerStatus();
		}

		//Per second
		if(level.time % 35 == 1) {
			calories -= 1;
			calories -= (ownr.fatigue - minfatigue);
			if(calories < 0) { calories = 0; }
		}

		//Per tic
		if(ownr.fatigue < minfatigue) { ownr.fatigue = minfatigue; }
	}

	void HungerStatus() {
		//Hunger status messages
		statusMessage = "";
		if(calories >= 500 && calories < 1000) { statusMessage = "Your stomach grumbles. "; }
		else if(calories >= 0 && calories < 500) { statusMessage = "Your stomach aches. "; }
		//Fatigue status message
		if(minfatigue >= 15 && minfatigue < 20) { statusMessage = statusMessage.."You feel weak. "; }
		if(minfatigue >= 20) { statusMessage = statusMessage.."You're getting shaky. "; }
		//Last meal messages
		int mealdelta = (lastmeal - calories);
		if(mealdelta >= 500 && mealdelta <1000) { statusMessage = statusMessage.."Time for another meal?"; }
		else if(mealdelta >= 1000 && mealdelta <1500) { statusMessage = statusMessage.."It's been a while since you ate. "; }
		else if(mealdelta >= 1500 && mealdelta <2000) { statusMessage = statusMessage.."When did you last eat? "; }
		else if(mealdelta >= 2000 && mealdelta <2500) { statusMessage = statusMessage.."You can't remember your last meal... "; }
		//Reset delta if meal eaten
		if(calories > lastcalories) {
			lastmeal = calories;
			lastcalories = calories;
		}
		//Display if delta over threshold, and reset
		if(abs(lastcalories - calories) >= 500) {
			A_Log(statusMessage);
			lastcalories = calories;
		}
	}

	States {
		Spawn:
			TNT1 A -1;
			stop;
		Use:
			TNT1 A 1;
			loop;
	}
}

class HDScav_FoodItem : HDPickup {
	HDScav_FoodEater eater;

	default {
		inventory.pickupmessage "Picked up some food.";
		inventory.icon "HSCVA0";
		inventory.MaxAmount 8;
		hdpickup.bulk 10;
		scale 0.5;
	}

	action void HDScav_OpenFood() {
		if(!countinv("HDScav_FoodEater")) { GiveInventory("HDScav_FoodEater",1); }
		invoker.eater = HDScav_FoodEater(FindInventory("HDScav_FoodEater", false));
		if(invoker.eater.mealSize <= 0) {
			invoker.eater.mealSize = random(10,15)*50;
		}
		A_SelectWeapon("HDScav_FoodEater");
	}

	States {
		Spawn:
			HSCV A -1;
			stop;
		Use:
			TNT1 A 1 HDScav_OpenFood();
			loop;
	}
}

class HDScav_EmptyFoodItem : HDDebris {
	default {
		scale 0.4;
		bouncesound "misc/wallchunks";
		bouncefactor 0.5;
	}

	States {
		Spawn:
			HSCV C 1;
			Wait;
		Death:
			HSCV C -1;
			stop;
	}
}

class HDScav_FoodEater : HDWoundFixer {
	HDScav_HungerTracker tracker;
	int biteSize;
	int mealSize;
	string flavor;

	default {
		+INVENTORY.UNDROPPABLE;
	}

	action string RandomFlavor() {
		switch(random(0,5))	{
			case 0:
				return "'Chili w/Beans'\n\nThe cheese will back you up for a month...\n";
				break;
			case 1:
				return "'Shredded Barbeque Beef'\n\nAnd 'Carb Fortified Beverage Powder'\nto wash it down.\n";
				break;
			case 2:
				return "'Meatballs in Marinara Sauce'\n\nIts-a me, Doomguy!\n";
				break;
			case 3:
				return "'Chili and Macaroni'\n\nOh boy, that means Skittles for desert!\n";
				break;
			case 4:
				return "'Spinach Mushrooms & Cream Sauce Fettuccine'\n\nMmm, eatin' fancy in the warzone tonight.\n";
				break;
			case 5:
				return "' Rib Shaped BBQ Pork Patty'\n\nJust like mamma used to make back home...\n";
				break;
		}
		return "'Generic Military Ration'";
	}

	action state HDScav_CheckFood() {
		if(invoker.mealSize <= 0) {
			A_WeaponMessage("No more food!",175);
			HDScav_DropEmpty();
			A_SelectWeapon("Ring");
			return ResolveState("nope");
		}
		return ResolveState(null);
	}

	action void HDScav_DropEmpty() {
		let empty=spawn("HDScav_EmptyFoodItem",pos+(0,0,height-8));
		invoker.flavor == "";
		empty.angle=angle+2;
		empty.vel=vel;
		empty.A_ChangeVelocity(3,1,1,CVF_RELATIVE);
		TakeInventory("HDScav_FoodItem",1);
	}

	action void HDScav_TakeScoop() {
		A_PlaySound("HDScav/FoodScoop", CHAN_AUTO, frandom(0.3, 0.6));
		invoker.biteSize  = min(invoker.mealsize, 75) * frandom(0.75,1.0);
		invoker.biteSize *= frandom(0.75,1.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 75);
		A_WeaponMessage(string.format("%s\n\nFood left: %i", invoker.flavor, invoker.mealSize),175);
	}

	action state HDScav_Consume() {
		invoker.tracker = HDScav_HungerTracker(FindInventory("HDScav_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(5,10);
			A_PlaySound("weapons/pocket", CHAN_AUTO, frandom(0.25, 0.4));
			A_PlaySound("misc/fragroll", CHAN_AUTO, frandom(0.25, 0.5));
			invoker.mealSize -= clamp(chunk, 0, invoker.biteSize);
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			//console.printf("%i",countinv("HDScav_CalorieItem"));
			A_WeaponMessage(string.format("%s\n\nFood left: %i", invoker.flavor, invoker.mealSize),175);
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	States {
		Select:
			TNT1 A 10 {
				if(!getcvar("hd_helptext")) return;
				if(invoker.flavor == "") { invoker.flavor = RandomFlavor(); }
				A_WeaponMessage(string.format("%s",invoker.flavor).."\n\nHold Fire to eat.\nRemember to chew your food!",250);

			}
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
		Scoop:
			TNT1 A random(15,20) HDScav_TakeScoop();
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A random(8,12) HDScav_Consume();
			TNT1 A 0 A_Refire("Consume");
		Swallow:
			TNT1 A random(5,10) A_PlaySound("weapons/pocket");
			TNT1 A 0 HDScav_CheckFood();
			goto Ready;
	}
}