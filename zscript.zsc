version "3.4"

class AlreadyInitialized : Inventory {}

class HDScav_Bootstrap : EventHandler {
	//initialize additional player inventory
	override void PlayerEntered(PlayerEvent e) {
		PlayerInfo player = players[e.PlayerNumber];
		if(!player.mo.countinv("AlreadyInitialized")) {
			player.mo.giveinventory("HDScav_HungerTracker", 1);
			player.mo.giveinventory("HDScav_MessKit", 1);
			player.mo.giveinventory("HDScav_Ration", 3);
			player.mo.giveinventory("AlreadyInitialized", 1);
		}
	}

	//Set up spawns
	override void WorldThingSpawned(WorldEvent e) {
		if(!e.Thing.GetClassName()) return;
		//Spawn rations on backpacks, with a change of a messkit
		else if(e.Thing.GetClassName() == "HDBP") {
			int count = random(1,3);
			for(int i=1; i <= count; i++) {
				let spawneditem = HDScav_Ration(Actor.Spawn("HDScav_Ration", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
			}
			if(RandomChance(0.25)) {
				let spawneditem = HDScav_Ration(Actor.Spawn("HDScav_MessKit", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
			}
		}

		//Spawn rations on ammo boxes
		else if(e.Thing.GetClassName() == "HDAmBox" || e.Thing.GetClassName() == "HDAmBoxUnarmed") {
			int count = random(1,2);
			for(int i=1; i <= count; i++) {
				let spawneditem = HDScav_Ration(Actor.Spawn("HDScav_Ration", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
			}
		}

		//Randomly spawn on stimpacks
		else if(e.Thing.GetClassName() == "PortableStimpack") {
			if(RandomChance(0.5)) {
				let spawneditem = HDScav_Ration(Actor.Spawn("HDScav_Ration", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
			}
		}

		//Rarely spawn on medikits
		else if(e.Thing.GetClassName() == "PortableMedikit") {
			if(RandomChance(0.15) == 0) {
				let spawneditem = HDScav_Ration(Actor.Spawn("HDScav_Ration", e.Thing.pos, false));
				spawneditem.vel.x += frandom(-1,1);
				spawneditem.vel.y += frandom(-1,1);
			}
		}

		//Randomly break 9mm mags into loose rounds
		//Commented out as this method of replacing is not good yet
		/*else if(e.Thing.GetClassName() == "HD9mMag15" || e.Thing.GetClassName() == "HD9mMag30") {
			if(e.Thing.bDROPPED) { return; }
			if(RandomChance(0.5) ) {
				int count = random(3,12);
				for(int i=1; i <= count; i++) {
					let spawneditem = HDLoose9mm(Actor.Spawn("HDLoose9mm", e.Thing.pos, false));
					spawneditem.vel.x += frandom(-2,2);
					spawneditem.vel.y += frandom(-2,2);
					spawneditem.vel.z += frandom(1,2);
				}
				e.Thing.Destroy();
			}
		}*/
	}

	//Return true for random below percentage
	bool RandomChance(double percentage = 0.5) {
		if(percentage < 0.0 || percentage > 1.0) { ThrowAbortException("Invalid range for random chance."); }
		if(frandom(0.0, 1.0) <= percentage) { return true; }
		return false;
	}
}

class HDScav_HungerTracker : CustomInventory {
	int calories;
	int lastcalories;
	int lastmeal;
	int minfatigue;
	string statusMessage;
	HDPlayerPawn ownr;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		calories = random(1500,2000);
	}

	override void DoEffect() {
		super.DoEffect();
		let ownr = HDPlayerPawn(owner);

		//Per minute
		if(level.time % 2100 == 1) {
			if(calories == 0) { minfatigue += 2; lastcalories += 60; }
			else { minfatigue -= 2; }
			if(minfatigue < 0) { minfatigue = 0; }
			if(hd_debug) { A_Log(string.format("Energy: %i\tMinFatigue: %i", calories, minfatigue)); }
			if(hd_debug) { A_Log(string.format("lastmeal: %i\tlastcalories: %i", lastmeal, lastcalories)); }
			HungerStatus();
		}

		//Per second
		if(level.time % 35 == 1) {
			calories -= 1;
			calories -= (ownr.fatigue - minfatigue);
			if(calories < 0) { calories = 0; }
		}

		//Per tic
		if(ownr.fatigue < minfatigue) { ownr.fatigue = minfatigue; }
	}

	void HungerStatus() {
		//Hunger status messages
		statusMessage = "";
		if(calories >= 1500) { statusMessage = "Your stomach is full. "; }
		else if(calories >= 500 && calories < 1000) { statusMessage = "Your stomach grumbles. "; }
		else if(calories >= 0 && calories < 500) { statusMessage = "Your stomach aches. "; }
		//Fatigue status message
		if(minfatigue >= 0 && minfatigue < 15) { statusMessage = statusMessage.."You feel weak. "; }
		if(minfatigue >= 15) { statusMessage = statusMessage.."You're getting shaky. "; }
		//Last meal messages
		int mealdelta = (lastmeal - calories);
		if(mealdelta >= 500 && mealdelta <1000) { statusMessage = statusMessage.."Time for another meal?"; }
		else if(mealdelta >= 1000 && mealdelta <1500) { statusMessage = statusMessage.."It's been a while since you ate. "; }
		else if(mealdelta >= 1500 && mealdelta <2000) { statusMessage = statusMessage.."When did you last eat? "; }
		else if(mealdelta >= 2000 && mealdelta <2500) { statusMessage = statusMessage.."You can't remember your last meal... "; }
		//Reset delta if calories increase
		if(calories > lastcalories) {
			lastmeal = calories;
			lastcalories = calories;
		}
		//Display message if delta over threshold, and reset
		if(abs(lastcalories - calories) >= 250) {
			A_Log(statusMessage);
			lastcalories = calories;
		}
	}

	States {
		Spawn:
			TNT1 A -1;
			stop;
		Use:
			TNT1 A 1;
			loop;
	}
}

class HDScav_Ration : HDPickup {
	default {
		inventory.pickupmessage "Picked up some food.";
		inventory.MaxAmount 16;
		hdpickup.bulk 10;
		scale 0.5;
		-INVENTORY.INVBAR;
		+INVENTORY.IGNORESKILL;
	}

	States {
		Spawn:
			HSCV A -1;
			stop;
	}
}

class HDScav_EmptyRation : HDDebris {
	default {
		scale 0.4;
		bouncesound "misc/wallchunks";
		bouncefactor 0.65;
	}

	States {
		Spawn:
			HSCV C 1;
			Wait;
		Death:
			HSCV C -1;
			stop;
	}
}

class HDScav_MessKit : HDWoundFixer {
	HDScav_HungerTracker tracker;
	int biteSize;
	int mealSize;
	string flavor;
	bool rationOpen;

	default {
		Scale 0.5;
		Inventory.Icon "HSCVB0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
	}

	override double, int weaponbulk(){
		return 10,0;
	}

	override void DoEffect() {
		//Set "amount" next to messkit as available food items
		amount = owner.countinv("HDScav_Ration");
		super.DoEffect();
	}

	override inventory CreateTossable(int amt) {
		//Throw away uneaten portion
		if(rationOpen == true) {
			HDScav_TossOpened();
			return NULL;
		}
		//Toss unopened rations
		else if(owner.countinv("HDScav_Ration") > 0) {
			owner.TakeInventory("HDScav_Ration",1);
			return inventory(Spawn("HDScav_Ration", owner.pos));
		}
		//Toss messkit itself
		else {
			//Can't toss the original unless there's at least one!
			amount++;
		}
		return super.CreateTossable();
	}

	States {
		Spawn:
			HSCV B -1;
			Stop;
		Select:
			TNT1 A 10 HDScav_SelectText();
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
			TNT1 A 0 HDScav_CheckFood();
			goto nope;
		Scoop:
			TNT1 A 0 HDScav_TakeScoop();
			TNT1 A random(15,20);
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A 0 HDScav_Consume();
			TNT1 A random(8,12);
			TNT1 A 0 A_Refire("Consume");
		Swallow:
			TNT1 A random(8,12) A_PlaySound("weapons/pocket");
			goto nope;
		Altfire:
			TNT1 A random(15,20) HDScav_OpenFood();
			goto nope;
	}

	//Displayed when the messkit is opened for use
	action void HDScav_SelectText() {
		if(!getcvar("hd_helptext")) return;
		A_WeaponMessage("\cjMESS KIT\c-\n\n\nPress and hold Fire to eat.\n\nAltfire opens a new ration,\nif one isn't already open.", 175);
	}

	//Makes sure the player has a food item open and food available.
	//If no food and open, toss empty. If not open, give message.
	action state HDScav_CheckFood() {
		if(invoker.mealSize > 0 && invoker.rationOpen == true) {
			return ResolveState("Scoop");
		}
		else if(invoker.rationOpen == true) {
			invoker.HDScav_TossOpened();
			return ResolveState("nope");
		}
		if(getcvar("hd_helptext")) { A_WeaponMessage("Nothing to eat!\n\nHave you opened a ration?", 175); }
		return ResolveState(null);
	}

	//Takes a random-sized "bite" of the food
	action void HDScav_TakeScoop() {
		A_PlaySound("HDScav/FoodScoop", CHAN_AUTO, frandom(0.3, 0.6));
		invoker.biteSize  = min(invoker.mealsize, 75) * frandom(0.75,1.0);
		invoker.biteSize *= frandom(0.75,1.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 75);
	}

	//"Chew" the food
	action state HDScav_Consume() {
		invoker.tracker = HDScav_HungerTracker(FindInventory("HDScav_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(5,10);
			A_PlaySound("weapons/pocket", CHAN_AUTO, frandom(0.25, 0.4));
			A_PlaySound("misc/fragroll", CHAN_AUTO, frandom(0.25, 0.5));
			invoker.mealSize -= clamp(chunk, 0, invoker.biteSize);
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			if(getcvar("hd_helptext")) { A_WeaponMessage(string.format("%s\n\n\nFood left: %i", invoker.flavor, invoker.mealSize), 175); }
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	//Open a new food ration if one isn't already open
	action void HDScav_OpenFood() {
		if(countinv("HDScav_Ration") > 0) {
			if(invoker.mealSize <= 0 && invoker.rationOpen == false) {
				A_PlaySound("imp/melee");
				invoker.mealSize = random(10,15)*50;
				invoker.rationOpen = true;
				invoker.flavor = RandomFlavor();
				if(getcvar("hd_helptext")) { A_WeaponMessage(string.format("%s", invoker.flavor), 175); }
			}
			else {
				if(getcvar("hd_helptext")) { A_WeaponMessage("You already have an opened ration!", 175); }
			}
		}
		else {
			if(getcvar("hd_helptext")) { A_WeaponMessage("You have no more rations!", 175); }
		}
	}

	//Toss opened ration
	void HDScav_TossOpened() {
		if(owner.getcvar("hd_helptext") && mealsize > 0) { A_WeaponMessage("Tossed leftovers. No 5-second rule here.", 175); }
		biteSize = 0;
		mealSize = 0;
		flavor = "";
		rationOpen = false;
		let empty=spawn("HDScav_EmptyRation",owner.pos+(0,0,owner.height-8));
		empty.angle=owner.angle+2;
		empty.vel=owner.vel;
		empty.A_ChangeVelocity(3,1,1,CVF_RELATIVE);
		owner.TakeInventory("HDScav_Ration",1);
	}

	//Generate literal flavortext
	action string RandomFlavor() {
		switch(random(0,5))	{
			case 0:
				return "'Chili w/Beans'\n\nThe cheese will back you up for a month...\n";
				break;
			case 1:
				return "'Shredded Barbeque Beef'\n\nAnd 'Carb Fortified Beverage Powder'\nto wash it down.\n";
				break;
			case 2:
				return "'Meatballs in Marinara Sauce'\n\nIts-a me, Doomguy!\n";
				break;
			case 3:
				return "'Chili and Macaroni'\n\nOh boy, that means Skittles for desert!\n";
				break;
			case 4:
				return "'Spinach Mushrooms & Cream Sauce Fettuccine'\n\nMmm, eatin' fancy in the warzone tonight.\n";
				break;
			case 5:
				return "' Rib Shaped BBQ Pork Patty'\n\nJust like mamma used to make back home...\n";
				break;
		}
		return "'Generic Military Ration'";
	}
}