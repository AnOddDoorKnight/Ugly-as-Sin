version "3.4"

class HDScav_CalorieItem : Inventory {
	default {
		inventory.MaxAmount 500;
	}
}

class HDScav_Bootstrap : EventHandler {
	override void PlayerEntered(PlayerEvent e) {
		PlayerInfo player = players[e.PlayerNumber];
		player.mo.giveinventory("HDScav_HungerTracker", 1);
		player.mo.giveinventory("HDScav_FoodItem", 3);
	}
}

class HDScav_HungerTracker : CustomInventory {
	int calories;
	int minfatigue;
	HDPlayerPawn ownr;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		calories = 2000;
	}

	override void DoEffect() {
		super.DoEffect();
		let ownr = HDPlayerPawn(owner);

		//Per minute
		if(level.time % 2100 == 1) {
			if(calories == 0) { minfatigue += 1; }
			else { minfatigue -= 1; }
		}

		//Per second
		if(level.time % 35 == 1) {
			calories -= 1;
			calories -= ownr.fatigue;
		}

		//Per tic
		if(ownr.fatigue < minfatigue) { ownr.fatigue = minfatigue; }
		if(minfatigue < 0) { minfatigue = 0; }
		if(calories < 0) { calories = 0; }
	}

	States {
		Spawn:
			TNT1 A -1;
			stop;
		Use:
			TNT1 A 1;
			loop;
	}
}

class HDScav_FoodItem : HDPickup {
	default {
		inventory.pickupmessage "Picked up some food.";
		inventory.icon "ROCKA0";
		inventory.MaxAmount 8;
		hdpickup.bulk 10;
	}

	action void OpenFood() {
		if(!countinv("HDScav_CalorieItem")) {
			GiveInventory("HDScav_CalorieItem", random(2,5)*50);
			TakeInventory("HDScav_FoodItem",1);
		}
		if(!countinv("HDScav_FoodEater")) { GiveInventory("HDScav_FoodEater",1); }
		A_SelectWeapon("HDScav_FoodEater");
	}

	States {
		Spawn:
			ROCK A -1;
			stop;
		Use:
			TNT1 A 1 OpenFood();
			loop;
	}
}

class HDScav_FoodEater : HDWoundFixer {
	HDScav_HungerTracker tracker;
	double biteSize;

	action state HDScav_CheckFood() {
		if(!countinv("HDScav_CalorieItem")) {
			A_WeaponMessage("No more food!",175);
			return ResolveState("Ready");
		}
		else {
			A_WeaponMessage(string.format("Food left: %i",countinv("HDScav_CalorieItem")),175);
		}
		return ResolveState(null);
	}

	action void HDScav_TakeScoop() {
		A_PlaySound("HDScav/FoodScoop", CHAN_BODY, frandom(0.3, 0.6));
		invoker.biteSize  = countinv("HDScav_CalorieItem");
		invoker.biteSize *= frandom(0.1,1.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 40);
	}

	action state HDScav_Consume() {
		invoker.tracker = HDScav_HungerTracker(FindInventory("HDScav_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(5,10);
			A_PlaySound("weapons/pocket", CHAN_BODY, frandom(0.25, 0.4));
			A_PlaySound("misc/fragroll", CHAN_VOICE, frandom(0.25, 0.5));
			TakeInventory("HDScav_CalorieItem", clamp(chunk, 0, invoker.biteSize));
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			//console.printf("%i",countinv("HDScav_CalorieItem"));
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	action void HDScav_Swallow() {

	}

	States {
		Spawn:
			TNT1 A 1;
			Stop;
		Select:
			TNT1 A 10 {
				if(!getcvar("hd_helptext")) return;
				A_WeaponMessage("Hold Fire to eat.\n\nRemember to chew your food!",175);

			}
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
			TNT1 A 0 HDScav_CheckFood();
		Scoop:
			TNT1 A random(15,20) HDScav_TakeScoop();
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A random(8,12) HDScav_Consume();
			TNT1 A 0 A_Refire("Consume");
		Swallow:
			TNT1 A random(5,10) A_PlaySound("weapons/pocket");
			goto Ready;
	}
}