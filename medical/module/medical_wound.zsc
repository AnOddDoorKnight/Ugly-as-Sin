class WoundInfo : thinker {
	string description;
	int painkiller;
	int dirty;
	int obstructed;
	int open;
	int cavity;
	int timer;
	int size;
	int infection;
	int pain;
	int avgstat;
	bool clear;

	override void PostBeginPlay() {
		super.PostBeginPlay();
		ChangeStatNum(STAT_STATIC);
	}

	void TickWound() {
		UpdateAverageStatus();
		timer = max(timer - 1, 0);
		pain = max(pain - 1, 0);
		pain = max(pain - painkiller / 20, 0);
		if (timer <= 0) {
			// Metabolize some painkiller
			painkiller = max(painkiller - 1, 0);

			// Random normal distribution for heal probability
			int toHeal = (
				random[uas_wi](0, 15) +
				random[uas_wi](0, 15) +
				random[uas_wi](0, 15)) / 3;

			// Wound heals some points
			if (toHeal >= avgstat) {
				if (open > 0) { open--; }
				if (cavity > 0) { cavity--; }
				if (dirty > 0) { dirty--; }
				if (obstructed > 0) { obstructed--; }
				if (infection > 0) { infection--; }
			}

			// Infection increases
			if (toHeal <= (avgstat + infection)) {
				infection = min(infection + 1, 100);
			}

			if (avgstat == 0) {
				clear = true;
			}
			timer = random[uas_wi](2,5) * (35 + open);
		}
	}

	bool inpain(int inflict = 0) {
		pain += inflict;
		return (pain > (painkiller + 25) * 2);
	}
}

// Status methods
extend class WoundInfo {
	void UpdateAverageStatus() {
		int retvalue, counted;
		if (dirty >= 0) { retvalue += dirty; counted++; }
		if (obstructed >= 0) { retvalue += obstructed; counted++;}
		if (cavity >= 0) { retvalue += cavity; counted++;}
		if (open >= 0) { retvalue += open; counted++;}
		//retvalue += infection;
		avgstat = retvalue / counted;
	}
}

// Static methods
extend class WoundInfo {
	static WoundInfo create(int newsize) {
		int sizemin = clamp(newsize * 10, 0, 100);
		int sizemax = clamp(newsize * 20, 0, 100);
		WoundInfo nw = new("WoundInfo");
		nw.painkiller = 0;
		nw.dirty = max(-1, randompick[uas_wi](-1, 1, 1, 1) * random[uas_wi](sizemin, sizemax));
		nw.obstructed = max(-1, randompick[uas_wi](-1, 1) * random[uas_wi](sizemin, sizemax));
		nw.cavity = max(-1, randompick[uas_wi](-1, 1, 1) * random[uas_wi](sizemin, sizemax));
		nw.infection = (nw.dirty + nw.obstructed + nw.open + nw.cavity) / 4;
		nw.open = random[uas_wi](sizemin, sizemax);
		nw.timer = (random[uas_wi](10, 30) * 35);
		nw.size = newsize;
		nw.description = WoundDescription(newsize);
		return nw;
	}

	static string WoundDescription(int newsize) {
		int sevmax = WoundInfo.severity.size()-1;
		int typmax = WoundInfo.type.size()-1;
		int parmax = WoundInfo.bodypart.size()-1;
		return string.format(
			"%s %s, %s",
			WoundInfo.severity[random[uas_wi](0, sevmax)],
			WoundInfo.type[random[uas_wi](0, typmax)],
			WoundInfo.bodypart[random[uas_wi](0, parmax)]
		);
	}

	static const string[] severity = { "minor","small","shallow","superficial","moderate","medium","large","deep","serious","critical" };
	static const string[] type = { "incision","laceration","puncture","avulsion","penetration" };
	static const string[] bodypart = {
		"chest","abdomen","pelvis",
		"upper back","lower back",
		"left shoulder","right shoulder",
		"left upper arm","right upper arm",
		"left forearm","right forearm",
		"left hip","right hip",
		"left thigh","right thigh",
		"left calf","right calf",
		"left shin","right shin"
	};
}
