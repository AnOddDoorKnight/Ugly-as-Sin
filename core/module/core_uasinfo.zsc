// Lump-reader base largly copy-pasted from HD-Injector by Accensus
// https://gitlab.com/accensi/hd-addons/injector
extend class UaS {
	array<string> UASINFOLump;

	override void OnRegister() {
		ReadUASINFO();
		DebugOutputRawLump();
	}

	void DebugOutputRawLump() {
		console.printf("ran DebugOutputRawLump()");
		for (int i = 0; i < UASINFOLump.Size(); i++) {
			console.printf(UASINFOLump[i]);
		}
	}

	void ReadUASINFO() {
		console.printf("ran ReadUASINFO()");
		string RawLumpText;
		int LumpNum;
		while ((LumpNum = Wads.FindLump("UASINFO", LumpNum + 1, Wads.GlobalNamespace)) >= 0) {
			Array<string> LumpLines;
			RawLumpText = Wads.ReadLump(LumpNum);
			RawLumpText.Split(LumpLines, ";", TOK_SKIPEMPTY);

			for (int i = 0; i < LumpLines.Size(); ++i) {
				string Line = LumpLines[i];

				// Remove newline characters
				int NewLineIndex = Line.RightIndexOf("\n");
				if (NewLineIndex > -1) { Line.Remove(NewLineIndex, 1); }

				// Remove return characters
				int ReturnIndex = Line.RightIndexOf("\r");
				if (ReturnIndex > -1) {	Line.Remove(ReturnIndex, 1); }

				// Remove spaces
				Line.Replace(" ", "");

				// Set back to lump
				LumpLines[i] = Line;

				// Remove blank lines
				if (LumpLines[i].Length() <= 0) { LumpLines.Delete(i); }
			}
			UASINFOLump.Append(LumpLines);
		}
	}

	static play string GetUASINFO
}

struct

// class UAS_Info : Thinker {
	// array<string> Lump;
//
	// static UAS_Info get() {
		// UAS_Info uil = null;
		// thinkeriterator it = thinkeriterator.create("UAS_Info");
		// while(uil = UAS_Info(it.next())){
			// if(uil)break;
		// }
		// if(!uil){
			// ltl=new("UaS_LootList");
			// ltl.InitLootTables();
		// }
		// return ltl;
	// }
//
// }
