// Damaged lite-amp effects (does not replace inventory item)

/*class HDScav_PortableLiteAmp : PortableLiteAmp replaces PortableLiteAmp {
	bool isBroken;

	override void PostBeginPlay() {
		isBroken = true;
		super.PostBeginPlay();
	}

	override void DoEffect() {
		super.DoEffect();
		if(HDScav.RandomChance(0.1)) {
			Shader.SetEnabled(owner.player,"NiteVis",false);
		}
	}
}*/

/*class HDScav_BrokeLiteAmpEffect : CustomInventory {
	PortableLiteAmp realLiteAmp;
	bool wasWorn;

	default {
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.PERSISTENTPOWER;
	}

	override void DoEffect() {
		super.DoEffect();
		let realLiteAmp = PortableLiteAmp(owner.FindInventory("PortableLiteAmp"));

		if(realLiteAmp.worn && HDScav.RandomChance(0.1)) {
			owner.A_SetBlend("00 00 00", 0 , 35 * frandom(0.1, 5.0), "00 00 00" , 1);
		}
	}

	States {
		Spawn:
			TNT1 A -1;
			stop;
		Use:
			TNT1 A 1;
			loop;
	}
}*/

// Damaged automap
class HDScav_Automap : HDPickup {
	int status;
	int baseFrame;
	double cycleProb;
	bool working;

	Default {
		scale 0.3;
	}

	override void actualpickup(actor other) {
		switch(status) {
			case 0: // Functioning Normally
				target = other;
				A_GiveToTarget("MapRevealer",1);
				A_Log("\c-Local area map downloaded.");
				A_PlaySound("misc/i_pkup",0,1,0,0);
				return;
				break;
			case 1: // Damaged
				if(working) {
					target = other;
					A_GiveToTarget("MapRevealer",1);
					A_Log("\c-Local area map downloaded.");
					A_PlaySound("misc/i_pkup",0,1,0,0);
				}
				if(HDScav.RandomChance(0.25)) { status = 2; }
				return;
				break;
			case 2: // Broken, might randomly fix
				if(HDScav.RandomChance(0.25)) { status = 1; }
				return;
				break;
		}
	}

	action void UpdateFrame() {
		invoker.cycleProb += 0.0001;
		switch(invoker.status) {
			case 0: // Functioning Normally
				invoker.sprite = GetSpriteIndex('PMAP');
				if(invoker.frame == invoker.baseFrame) { invoker.frame = invoker.baseFrame + 4; }
				else { invoker.frame = invoker.baseFrame; }

				if(HDScav.RandomChance(invoker.cycleProb)) {
					invoker.baseFrame = random(0,3);
					invoker.cycleProb = 0;
				}
				break;
			case 1: // Damaged
				invoker.sprite = GetSpriteIndex('HSCV');
				if(invoker.baseframe < 10) { invoker.baseframe = 10; }

				if(invoker.working) {
					if(invoker.frame == invoker.baseFrame) { invoker.frame = 9; }
					else { invoker.frame = invoker.baseFrame; }
					invoker.tics += random(0,2);
				}
				else {
					invoker.frame = 9;
					invoker.tics += random(0,5);
				}

				if(HDScav.RandomChance(0.1)) { invoker.working = !invoker.working; }

				if(HDScav.RandomChance(invoker.cycleProb)) {
					invoker.baseFrame = random(10,13);
					invoker.cycleProb = 0;
				}
				break;
			case 2: // Broken and useless
				invoker.sprite = GetSpriteIndex('HSCV');
				invoker.frame = 9;
				break;
		}
	}

	States {
		Spawn:
			TNT1 A 1;
		SpawnLoop:
			#### # 1 UpdateFrame();
			Loop;
	}
}

/*
actor HDMap:HDUPK replaces Allmap{
	scale 0.3
	states{
	give:
		PMAP A 0{
			A_GiveToTarget("MapRevealer",1);
			A_Log("\c-Local area map downloaded.");
			A_PlaySound("misc/i_pkup",0,1,0,0);
		}//fallthrough to spawn
	spawn:
		PMAP A 0 A_Stop
		PMAP A 0 A_Jump(256,"a","b","c","d")
	a:
		PMAP AE 1 A_SetTics(random(1,3))
		"----" A 0 A_Jump(4,"spawn")
		loop
	b:
		PMAP BF 1 A_SetTics(random(1,3))
		"----" A 0 A_Jump(4,"spawn")
		loop
	c:
		PMAP CG 1 A_SetTics(random(1,3))
		"----" A 0 A_Jump(4,"spawn")
		loop
	d:
		PMAP DH 1 A_SetTics(random(1,3))
		"----" A 0 A_Jump(4,"spawn")
		loop
	}
}*/

// Loose injector pickups
class HDScav_StimInjector : Actor {
	default {
		translation "176:191=80:95";
	}

	override void PostBeginPlay(){
		let spawneditem = Inventory(actor.Spawn("PortableStimpack", (pos.x, pos.y, pos.z + 5)));
		if(spawneditem) {
			spawneditem.sprite = GetSpriteIndex('SYRG');
			spawneditem.frame = 0;
			spawneditem.translation = translation;
			spawneditem.scale.x = 0.32;
			spawneditem.scale.y = 0.28;
			//spawneditem.PickupMsg = "Picked up a loose stim injector.";
		}
		destroy();
		super.PostBeginPlay();
	}
}

class HDScav_ZerkInjector : Actor {
	default {
		translation "112:127=107:111";
	}

	override void PostBeginPlay(){
		let spawneditem = Inventory(actor.Spawn("PortableBerserkPack", (pos.x, pos.y, pos.z + 5)));
		if(spawneditem) {
			spawneditem.sprite = GetSpriteIndex('SYRG');
			spawneditem.frame = 0;
			spawneditem.translation = translation;
			spawneditem.scale.x = 0.32;
			spawneditem.scale.y = 0.28;
			spawneditem.amount = 1;
			//spawneditem.PickupMsg = "Picked up a loose zerk injector.";
		}
		destroy();
		super.PostBeginPlay();
	}
}

// Can't actually pick these up, but they respond to the action
class HDScav_FakePickup : HDPickup {
	override void actualpickup(actor other) {
		return;
	}
}

class HDScav_EmptyStimpack : HDScav_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV E 1;
			Loop;
	}
}

class HDScav_EmptyMedikit : HDScav_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV F 1;
			Loop;
	}
}

class HDScav_EmptyZerkpack : HDScav_FakePickup {
	default {
		scale 0.3;
	}

	States {
		Spawn:
			HSCV G 1;
			Loop;
	}
}

class HDScav_EmptyRocketBox : HDScav_FakePickup {
	default {
		scale 0.5;
	}

	States {
		Spawn:
			HSCV H 1;
			Loop;
	}
}

class HDScav_BrokenLiteAmp : HDScav_FakePickup {
	default {
		scale 0.5;
	}

	States {
		Spawn:
			HSCV O 1;
			Loop;
	}
}