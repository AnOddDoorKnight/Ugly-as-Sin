class HDScav_Reloader : HDWeapon {
	string statusMessage;
	string lastStatus;
	int reloadMode;
	int rawShot;
	int brassProgress, breakProgress, shotProgress, pressProgress;
	int readyBrass, readyPowder, readyShot;

	enum reloadermodes {
		HDSCAV_RELOAD_BRASS = 0,
		HDSCAV_RELOAD_BREAK = 1,
		HDSCAV_RELOAD_REFORGE = 2,
		HDSCAV_RELOAD_PRESS = 3,
	}

	enum successthresholds {
		HDSCAV_SUCCESS_BRASS = 10,
		HDSCAV_SUCCESS_BREAK = 5,
		HDSCAV_SUCCESS_REFORGE = 10,
		HDSCAV_SUCCESS_PRESS = 10,
	}

	Default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a portable field reloading kit.";
		Inventory.Icon "HSCVQ0";
		Scale 0.6;
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		//+WEAPON.NO_AUTO_SWITCH;
		//+WEAPON.NOAUTOFIRE;
	}

	override double, int weaponbulk(){
		return 20,0;
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		reloadMode = HDSCAV_RELOAD_BRASS;
	}

	void ChangeMode() {
		reloadMode++;
		if(reloadMode > HDSCAV_RELOAD_PRESS) { reloadMode = HDSCAV_RELOAD_BRASS; }
	}

	void UpdateMessage(string appendMessage = "") {
		statusMessage = "";
		statusMessage = statusMessage.."\cyField Reloading Kit\n\n";
		if(reloadMode == HDSCAV_RELOAD_BRASS) { statusMessage = statusMessage.."\cuHold \cqFire \cuto prep brass\n"; }
		else if(reloadMode == HDSCAV_RELOAD_BREAK) { statusMessage = statusMessage.."\cuHold \cqFire \cuto split powder and shot\n"; }
		else if(reloadMode == HDSCAV_RELOAD_REFORGE) { statusMessage = statusMessage.."\cuHold \cqFire \cuto reforge shot\n"; }
		else if(reloadMode == HDSCAV_RELOAD_PRESS) { statusMessage = statusMessage.."\cuHold \cqFire \cuto press a new round\n"; }
		statusMessage = statusMessage.."\cqFiremode \cuto change mode\n\n";
		statusMessage = statusMessage.."\cj7.76mm brass: "..owner.countinv("SevenMilBrass").."\n";
		statusMessage = statusMessage.."\cj4.26mm rounds: "..owner.countinv("FourMilAmmo").."\n";
		statusMessage = statusMessage.."\n";
		statusMessage = statusMessage.."\cj4.26mm shot: "..rawShot.."\n";
		statusMessage = statusMessage.."\n";
		if(readyPowder < 3) { statusMessage = statusMessage.."\cg"; } else { statusMessage = statusMessage.."\cd"; }
		statusMessage = statusMessage.."Prepped powder: "..readyPowder.."\n";
		if(readyBrass < 1) { statusMessage = statusMessage.."\cg"; } else { statusMessage = statusMessage.."\cd"; }
		statusMessage = statusMessage.."Prepped 7.76mm brass: "..readyBrass.."\n";
		if(readyShot < 1) { statusMessage = statusMessage.."\cg"; } else { statusMessage = statusMessage.."\cd"; }
		statusMessage = statusMessage.."Prepped 7.76mm shot: "..readyShot.."\n";
		statusMessage = statusMessage.."\n";
		statusMessage = statusMessage..appendMessage;
		A_WeaponMessage(statusMessage);
	}

	action state ProcessReload() {
		switch(invoker.reloadMode) {
			//Clean, lubricate, trim, and resize brass
			case HDSCAV_RELOAD_BRASS:
				if(countinv("SevenMilBrass") <= 0 && invoker.brassProgress == 0) {
					invoker.lastStatus = "\cgNo brass to prep!";
					return ResolveState(null);
				}
				if(invoker.lastStatus == "") {
					invoker.lastStatus = "Prepping brass\n";
					TakeInventory("SevenMilBrass", 1);
				}
				invoker.brassProgress++;
				invoker.lastStatus = invoker.lastStatus..".";
				if(invoker.brassProgress > HDSCAV_SUCCESS_BRASS - random(0, HDSCAV_SUCCESS_BRASS / 4)) {
					invoker.HandleSuccess();
					return ResolveState("finished");
				}
				break;
			//Breaking down powder and shot from caseless rounds
			case HDSCAV_RELOAD_BREAK:
				if(countinv("FourMilAmmo") <= 0 && invoker.breakProgress == 0) {
					invoker.lastStatus = "\cgNo caseless rounds to break!";
					return ResolveState(null);
				}
				if(invoker.lastStatus == "") {
					invoker.lastStatus = "Breaking caseless rounds\n";
					TakeInventory("FourMilAmmo", 1);
				}
				invoker.breakProgress++;
				invoker.lastStatus = invoker.lastStatus..".";
				if(invoker.breakProgress > HDSCAV_SUCCESS_BREAK - random(0, HDSCAV_SUCCESS_BREAK / 4)) {
					invoker.HandleSuccess();
					return ResolveState("finished");
				}
				break;
			//Reforge 4.26mm shot into 7.76mm shot
			case HDSCAV_RELOAD_REFORGE:
				if(invoker.rawShot < 3 && invoker.shotProgress == 0) {
					invoker.lastStatus = "\cgNot enough shot to reforge!";
					return ResolveState(null);
				}
				if(invoker.lastStatus == "") {
					invoker.lastStatus = "Reforging shot\n";
					invoker.rawShot -= 3;
				}
				invoker.shotProgress++;
				invoker.lastStatus = invoker.lastStatus..".";
				if(invoker.shotProgress >= HDSCAV_SUCCESS_REFORGE - random(0, HDSCAV_SUCCESS_REFORGE / 4)) {
					invoker.HandleSuccess();
					return ResolveState("finished");
				}
				break;
			//Press shot and powder and brass into a new round
			case HDSCAV_RELOAD_PRESS:
				if((invoker.readyShot < 1 || invoker.readyPowder < 3 || invoker.readyBrass < 1) && invoker.pressProgress == 0) {
					invoker.lastStatus = "\gNot enough prepped materials!";
					return ResolveState(null);
				}
				if(invoker.lastStatus == "") {
					invoker.lastStatus = "Presssing new 7.76mm round\n";
					invoker.readyPowder -= 3;
					invoker.readyShot--;
					invoker.readyBrass--;
				}
				invoker.pressProgress++;
				invoker.lastStatus = invoker.lastStatus..".";
				if(invoker.pressProgress > HDSCAV_SUCCESS_PRESS - random(0, HDSCAV_SUCCESS_PRESS / 4)) {
					invoker.HandleSuccess();
					return ResolveState("finished");
				}
				break;
		}
		return ResolveState(null);
	}

	void HandleSuccess() {
		switch(reloadMode) {
			case HDSCAV_RELOAD_BRASS:
				brassProgress = 0;
				readyBrass++;
				lastStatus = "\cdBrass casing ready!";
				owner.A_PlaySound("misc/casing", volume: 0.15);
				break;
			case HDSCAV_RELOAD_BREAK:
				breakProgress = 0;
				readyPowder++;
				RawShot++;
				lastStatus = "\cdPowder and shot broken down!";
				owner.A_PlaySound("weapons/rifleclick", volume: 0.15);
				break;
			case HDSCAV_RELOAD_REFORGE:
				shotProgress = 0;
				readyShot++;
				lastStatus = "\cdShot reforged!";
				A_PlaySound("misc/tink", volume: 0.15);
				break;
			case HDSCAV_RELOAD_PRESS:
				pressProgress = 0;
				lastStatus = "\cfNew round pressed!!";
				owner.A_GiveInventory("SevenMilAmmo", 1);
				owner.A_PlaySound("misc/casing", volume: 0.5);
				break;
		}
	}

	action state HandleAbort() {
		if(invoker.brassProgress > 0) {
			if(random(0, HDSCAV_SUCCESS_BRASS) < invoker.brassProgress) { invoker.HandleSuccess(); return resolveState("finished"); }
			invoker.brassProgress = 0;
			invoker.lastStatus = "\caRuined the casing!";
		}
		if(invoker.breakProgress > 0) {
			if(random(0, HDSCAV_SUCCESS_BREAK) < invoker.breakProgress) { invoker.HandleSuccess(); return resolveState("finished"); }
			invoker.breakProgress = 0;
			invoker.lastStatus = "\caRuined the powder and shot!";
		}
		if(invoker.shotProgress > 0) {
			if(random(0, HDSCAV_SUCCESS_REFORGE) < invoker.shotProgress) { invoker.HandleSuccess(); return resolveState("finished"); }
			invoker.shotProgress = 0;
			invoker.lastStatus = "\caRuined the shot!";
		}
		if(invoker.pressProgress > 0) {
			if(random(0, HDSCAV_SUCCESS_PRESS) < invoker.pressProgress) { invoker.HandleSuccess(); return resolveState("finished"); }
			invoker.pressProgress = 0;
			invoker.lastStatus = "\caRuined the new round!";
		}
		return resolveState(null);
	}

	States {
		Spawn:
			HSCV Q -1;
			stop;
		Select:
			TNT1 A 10 {
				invoker.UpdateMessage(); }
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Ready:
			TNT1 A 1 { invoker.UpdateMessage(invoker.lastStatus); }
			TNT1 A 1 { invoker.lastStatus = ""; }
			TNT1 A 1 { if(HDScav_ReloaderAutoContinue) { A_Refire("Fire"); } }
			goto Super::Ready;
		Fire:
			TNT1 A 3 ProcessReload();
			TNT1 A 1 { invoker.UpdateMessage(invoker.lastStatus); }
			TNT1 A 1 A_Refire("fire");
			goto aborted;
		finished:
			TNT1 A 1 { invoker.UpdateMessage(invoker.lastStatus); }
			TNT1 A 1 { if(!HDScav_ReloaderAutoContinue) { A_Refire("finished"); } }
			TNT1 A 1 { invoker.lastStatus = ""; }
			goto ready;
		aborted:
			TNT1 A 0 HandleAbort();
			TNT1 A 35 { invoker.UpdateMessage(invoker.lastStatus); }
			goto finished;
		User2:
			TNT1 A 1 { invoker.ChangeMode(); }
			goto nope;
	}
}
