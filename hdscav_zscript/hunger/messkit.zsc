class HDScav_MessKit : HDWoundFixer {
	HDScav_HungerTracker tracker;
	int biteSize;
	int mealSize;
	string flavor;
	bool rationOpen;

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up messkit.";
		Inventory.Icon "HSCVB0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
	}

	override double, int weaponbulk(){
		return 15,0;
	}

	override void DoEffect() {
		//Set "amount" next to messkit as available food items
		amount = owner.countinv("HDScav_Ration");
		super.DoEffect();
	}

	override inventory CreateTossable(int amt) {
		//Drop both current meal and messkit if stunned
		/*if(owner.stunned) {
			HDScav_TossOpened();
			if(amount<=0) { amount = 1; }
			return super.CreateTossable();
		}*/
		//Toss unopened rations
		if(owner.countinv("HDScav_Ration") > 1) {
			owner.TakeInventory("HDScav_Ration",1);
			return inventory(Spawn("HDScav_Ration", owner.pos));
		}
		else if(owner.countinv("HDScav_Ration") == 1) {
			if(rationOpen == true) {
				//Throw away uneaten portion
				HDScav_TossOpened();
				return NULL;
			}
			else {
				//Toss last unopened ration
				owner.TakeInventory("HDScav_Ration",1);
				return inventory(Spawn("HDScav_Ration", owner.pos));
			}
		}
		//Toss messkit itself
		else {
			//Can't toss the original unless there's at least one!
			amount++;
		}
		return super.CreateTossable();
	}

	States {
		Spawn:
			HSCV B -1;
			Stop;
		Select:
			TNT1 A 10 HDScav_SelectText();
			goto Super::Select;
		DeselectHold:
			TNT1 A 1;
			TNT1 A 0 A_Refire("DeselectHold");
			TNT1 A 0{
				A_SelectWeapon("Ring");
				A_WeaponReady(WRF_NOFIRE);
			}
			goto nope;
		Fire:
			TNT1 A 0 HDScav_CheckFood();
			goto nope;
		Scoop:
			TNT1 A 0 HDScav_TakeScoop();
			TNT1 A random(15,20);
			TNT1 A 0 A_Refire("Consume");
			goto nope;
		Consume:
			TNT1 A 0 HDScav_Consume();
			TNT1 A random(8,12);
			TNT1 A 0 A_Refire("Consume");
		Swallow:
			TNT1 A random(8,12) A_PlaySound("weapons/pocket");
			goto nope;
		Altfire:
			TNT1 A random(15,20) HDScav_OpenFood();
			goto nope;
	}

	//Displayed when the messkit is opened for use
	action void HDScav_SelectText() {
		if(!getcvar("hd_helptext")) return;
		A_WeaponMessage("\cjMESS KIT\c-\n\n\nPress and hold Fire to eat.\n\nAltfire opens a new ration,\nif one isn't already open.", 175);
	}

	//Makes sure the player has a food item open and food available.
	//If no food and open, toss empty. If not open, give message.
	action state HDScav_CheckFood() {
		if(invoker.mealSize > 0 && invoker.rationOpen == true) {
			return ResolveState("Scoop");
		}
		else if(invoker.rationOpen == true) {
			invoker.HDScav_TossOpened();
			return ResolveState("nope");
		}
		if(getcvar("hd_helptext")) { A_WeaponMessage("Nothing to eat!\n\nHave you opened a ration?", 175); }
		return ResolveState(null);
	}

	//Takes a random-sized "bite" of the food
	action void HDScav_TakeScoop() {
		A_PlaySound("HDScav/FoodScoop", CHAN_AUTO, frandom(0.3, 0.6));
		invoker.biteSize  = min(invoker.mealsize, 75) * frandom(0.75,1.0);
		invoker.biteSize *= frandom(0.75,1.0);
		invoker.biteSize  = clamp(invoker.biteSize, 1, 75);
	}

	//"Chew" the food
	action state HDScav_Consume() {
		invoker.tracker = HDScav_HungerTracker(FindInventory("HDScav_HungerTracker", false));
		if(invoker.bitesize > 0) {
			//Chew
			int chunk = random(5,10);
			A_PlaySound("weapons/pocket", CHAN_AUTO, frandom(0.25, 0.4));
			A_PlaySound("misc/fragroll", CHAN_AUTO, frandom(0.25, 0.5));
			invoker.mealSize -= clamp(chunk, 0, invoker.biteSize);
			invoker.tracker.calories += clamp(chunk, 0, invoker.biteSize);
			invoker.biteSize -= clamp(chunk, 0, invoker.biteSize);
			if(getcvar("hd_helptext")) { A_WeaponMessage(string.format("%s\n\n\nFood left: %i", invoker.flavor, invoker.mealSize), 175); }
			return ResolveState(null);
		}
		return ResolveState("Swallow");
	}

	//Open a new food ration if one isn't already open
	action void HDScav_OpenFood() {
		if(countinv("HDScav_Ration") > 0) {
			if(invoker.mealSize <= 0 && invoker.rationOpen == false) {
				A_PlaySound("imp/melee");
				invoker.mealSize = random(10,15)*50;
				invoker.rationOpen = true;
				invoker.flavor = RandomFlavor();
				if(getcvar("hd_helptext")) { A_WeaponMessage(string.format("%s", invoker.flavor), 175); }
			}
			else {
				if(getcvar("hd_helptext")) { A_WeaponMessage("You already have an opened ration!", 175); }
			}
		}
		else {
			if(getcvar("hd_helptext")) { A_WeaponMessage("You have no more rations!", 175); }
		}
	}

	//Toss opened ration
	void HDScav_TossOpened() {
		if(owner.getcvar("hd_helptext") && mealsize > 0) { A_WeaponMessage("Tossed leftovers. No 5-second rule here.", 175); }
		biteSize = 0;
		mealSize = 0;
		flavor = "";
		rationOpen = false;
		let empty=spawn("HDScav_EmptyRation",owner.pos+(0,0,owner.height-8));
		empty.angle=owner.angle+2;
		empty.vel=owner.vel;
		empty.A_ChangeVelocity(3,1,1,CVF_RELATIVE);
		owner.TakeInventory("HDScav_Ration",1);
	}

	//Generate literal flavortext
	action string RandomFlavor() {
		switch(random(0,5))	{
			case 0:
				return "\cb'Chili w/Beans'\c-\n\nThe cheese will back you up for a month...\n";
				break;
			case 1:
				return "\cb'Shredded Barbeque Beef'\c-\n\nAnd 'Carb Fortified Beverage Powder'\nto wash it down.\n";
				break;
			case 2:
				return "\cb'Meatballs in Marinara Sauce'\c-\n\nIts-a me, Doomguy!\n";
				break;
			case 3:
				return "\cb'Chili and Macaroni'\c-\n\nOh boy, that means Skittles for desert!\n";
				break;
			case 4:
				return "\cb'Spinach Mushrooms & Fettuccine'\c-\n\nMmm, eatin' fancy in the warzone tonight.\n";
				break;
			case 5:
				return "\cb' Rib Shaped BBQ Pork Patty'\c-\n\nJust like mamma used to make back home...\n";
				break;
		}
		return "'Generic Military Ration'";
	}
}